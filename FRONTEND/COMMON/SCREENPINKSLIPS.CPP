#include "THISDUST.H"
#include "SCREENPINKSLIPS.H"


// decompiled code
// original method signature: 
// void /*$ra*/ DrawBackground__16tScreenPinkSlips(struct tScreenPinkSlips *this /*$fp*/)
 // line 71, offset 0x80038b68
	/* begin block 1 */
		// Start line: 72
		// Start offset: 0x80038B68
		// Variables:
	// 		struct RECT r; // stack offset -200
	// 		short i; // $s2
	// 		short j; // $s1
	// 		short tv; // $s3
	// 		enum tMenuTextState textState; // $s0
	// 		struct tTrackInformation trackInfo; // stack offset -192
	// 		static int flareextra; // offset 0x0
	// 		short shapeY; // stack offset -64

		/* begin block 1.1 */
			// Start line: 72
			// Start offset: 0x80038B68

			/* begin block 1.1.1 */
				// Start line: 80
				// Start offset: 0x80038BC8

				/* begin block 1.1.1.1 */
					// Start line: 82
					// Start offset: 0x80038BE0

					/* begin block 1.1.1.1.1 */
						// Start line: 82
						// Start offset: 0x80038BE0
						// Variables:
					// 		struct tMenu *this; // $v0

						/* begin block 1.1.1.1.1.1 */
							// Start line: 82
							// Start offset: 0x80038BE0
						/* end block 1.1.1.1.1.1 */
						// End offset: 0x80038BE0
						// End Line: 82
					/* end block 1.1.1.1.1 */
					// End offset: 0x80038BE0
					// End Line: 82

					/* begin block 1.1.1.1.2 */
						// Start line: 83
						// Start offset: 0x80038C04

						/* begin block 1.1.1.1.2.1 */
							// Start line: 83
							// Start offset: 0x80038C04
						/* end block 1.1.1.1.2.1 */
						// End offset: 0x80038C04
						// End Line: 83
					/* end block 1.1.1.1.2 */
					// End offset: 0x80038C04
					// End Line: 83

					/* begin block 1.1.1.1.3 */
						// Start line: 84
						// Start offset: 0x80038C18
						// Variables:
					// 		int flare_intensity; // $a0

						/* begin block 1.1.1.1.3.1 */
							// Start line: 90
							// Start offset: 0x80038C60

							/* begin block 1.1.1.1.3.1.1 */
								// Start line: 93
								// Start offset: 0x80038C80
							/* end block 1.1.1.1.3.1.1 */
							// End offset: 0x80038CE8
							// End Line: 97
						/* end block 1.1.1.1.3.1 */
						// End offset: 0x80038CE8
						// End Line: 97
					/* end block 1.1.1.1.3 */
					// End offset: 0x80038CEC
					// End Line: 101
				/* end block 1.1.1.1 */
				// End offset: 0x80038CEC
				// End Line: 101
			/* end block 1.1.1 */
			// End offset: 0x80038CEC
			// End Line: 104
		/* end block 1.1 */
		// End offset: 0x80038D84
		// End Line: 110

		/* begin block 1.2 */
			// Start line: 110
			// Start offset: 0x80038D84
			// Variables:
		// 		struct tMenu *this; // $v0

			/* begin block 1.2.1 */
				// Start line: 110
				// Start offset: 0x80038D84
			/* end block 1.2.1 */
			// End offset: 0x80038D84
			// End Line: 110
		/* end block 1.2 */
		// End offset: 0x80038D84
		// End Line: 110

		/* begin block 1.3 */
			// Start line: 117
			// Start offset: 0x80038DAC

			/* begin block 1.3.1 */
				// Start line: 122
				// Start offset: 0x80038E04

				/* begin block 1.3.1.1 */
					// Start line: 123
					// Start offset: 0x80038E04

					/* begin block 1.3.1.1.1 */
						// Start line: 123
						// Start offset: 0x80038E04
					/* end block 1.3.1.1.1 */
					// End offset: 0x80038E04
					// End Line: 123
				/* end block 1.3.1.1 */
				// End offset: 0x80038E04
				// End Line: 123
			/* end block 1.3.1 */
			// End offset: 0x80038E24
			// End Line: 125
		/* end block 1.3 */
		// End offset: 0x80038E24
		// End Line: 125

		/* begin block 1.4 */
			// Start line: 129
			// Start offset: 0x80038E24

			/* begin block 1.4.1 */
				// Start line: 174
				// Start offset: 0x80038FB8

				/* begin block 1.4.1.1 */
					// Start line: 174
					// Start offset: 0x80038FB8

					/* begin block 1.4.1.1.1 */
						// Start line: 174
						// Start offset: 0x80038FB8

						/* begin block 1.4.1.1.1.1 */
							// Start line: 174
							// Start offset: 0x80038FB8
						/* end block 1.4.1.1.1.1 */
						// End offset: 0x80038FB8
						// End Line: 174
					/* end block 1.4.1.1.1 */
					// End offset: 0x80038FB8
					// End Line: 174

					/* begin block 1.4.1.1.2 */
						// Start line: 175
						// Start offset: 0x80038FD8
						// Variables:
					// 		char moviename[80]; // stack offset -144
					/* end block 1.4.1.1.2 */
					// End offset: 0x80039010
					// End Line: 180
				/* end block 1.4.1.1 */
				// End offset: 0x80039010
				// End Line: 180
			/* end block 1.4.1 */
			// End offset: 0x80039010
			// End Line: 180
		/* end block 1.4 */
		// End offset: 0x80039010
		// End Line: 180
	/* end block 1 */
	// End offset: 0x800390E8
	// End Line: 195

	/* begin block 2 */
		// Start line: 142
	/* end block 2 */
	// End Line: 143

	/* begin block 3 */
		// Start line: 142
	/* end block 3 */
	// End Line: 143

/* WARNING: Could not reconcile some variable overlaps */

void DrawBackground__16tScreenPinkSlips(tScreenPinkSlips *this)

{
  ushort uVar1;
  bool bVar2;
  short index;
  uint uVar3;
  VIDEOSTATE VVar4;
  int iVar5;
  uint uVar6;
  int y;
  tMenuTextState state;
  tShapeInformation *ptVar7;
  int iVar8;
  char cVar9;
  RECT local_c8;
  tTrackInformation local_c0;
  char acStack144 [80];
  short local_40;
  char local_38;
  uint local_30;
  undefined4 local_2c;
  
  iVar8 = 0;
  local_c8.x = 0x15b;
  local_c8.y = 0x8f;
  local_c8.w = 0x90;
  local_c8.h = 0xe;
  while( true ) {
    iVar5 = (int)(short)iVar8;
    state = textState_Selected;
    if ((int)(uint)(byte)frontEnd.pinkSlipsNumTracks <= iVar5) break;
    y = (int)*(short *)(*(int *)((this->tScreen)._vf + 6) + 8);
    bVar2 = false;
    if ((iVar5 == y + -1) || ((iVar5 == 0 && (y == 0)))) {
      bVar2 = true;
    }
    if (bVar2) {
      flareextra_248 = flareextra_248 + 1;
      if (0x3c < (int)flareextra_248) {
        flareextra_248 = 0;
      }
      uVar3 = flareextra_248 >> 0x1f;
      uVar6 = flareextra_248;
      if (0x1e < (int)flareextra_248) {
        uVar3 = 0x3c - flareextra_248;
        uVar6 = uVar3 >> 0x1f;
      }
      uVar6 = (((int)(uVar6 + uVar3) >> 1) + 0x14) * (0x80 - (int)(this->tScreen).fScreenFadeVal);
      if (0 < (int)uVar6) {
        iVar5 = (int)(short)local_c8.x;
        y = (int)(short)local_c8.y;
        Flare_2DHalo__Fiiiii
                  (iVar5 + -0xf,y + 6,(int)(uVar6 + (uVar6 >> 0x1f)) >> 1,(int)(uVar6 * 2) / 3,0x17)
        ;
        DrawShapeExtended__FiiiiiiP18tDrawShapeExtended
                  (0x38,0,iVar5 + -0x12,y,(int)(this->tScreen).fScreenFadeVal,1,
                   (tDrawShapeExtended *)0x0);
      }
      state = textState_Hilighted;
    }
    GetTrack__13tTrackManagersR17tTrackInformation
              (&trackManager,(ushort)(byte)frontEnd.track[(int)(short)iVar8],&local_c0);
    frontEnd.pinkSlipsTrackIndex = (char)iVar8;
    index = TextValue__18tListIteratorTrack7tPlayer
                      ((tListIteratorTrack *)
                       &(menuDefs->itemTrack3).tMenuItemLeftRightChoice.tMenuItemInteractive.
                        tMenuItem.fNumFrames,~kPlayerOne);
    FETextRender_MenuTextPositionedJustify__Fssss14tMenuTextState13tMenuTextType
              (index,(short)(((uint)local_c8.x + 10) * 0x10000 >> 0x10),
               (short)(((uint)local_c8.y + 3) * 0x10000 >> 0x10),0,state,textType_FlybyHelp);
    DrawShape_NFS4RoundRectangle__FiR4RECTs(-1,&local_c8,1);
    iVar8 = iVar8 + 1;
    local_c8.y = local_c8.y + 0xe;
  }
  uVar1 = *(ushort *)(*(int *)((this->tScreen)._vf + 6) + 8);
  frontEnd.pinkSlipsTrackIndex = (char)uVar1;
  if ((uVar1 & 0xff) != 0) {
    frontEnd.pinkSlipsTrackIndex = frontEnd.pinkSlipsTrackIndex + -1;
  }
  GetTrack__13tTrackManagersR17tTrackInformation
            (&trackManager,(ushort)(byte)frontEnd.track[(uint)(byte)frontEnd.pinkSlipsTrackIndex],
             &local_c0);
  UpdateVideoWall__16tScreenPinkSlipsR17tTrackInformation(this,&local_c0);
  IsShapeFileLoaded__7tScreenR17tShapeInformation((tScreen *)this,&(this->tScreen).fSwapShapes);
  if (((this->tScreen).fSwapShapes.fFile != (char *)0x0) && (-1 < *(char *)&this->fTVTicks)) {
    UploadSwapShapes__7tScreeni((tScreen *)this,4);
    *(undefined *)&this->fTVTicks = 1;
    *(uchar **)&this->fStartTicks = ticks;
  }
  DrawVideoWall__16tScreenPinkSlips(this);
  bVar2 = (this->hVideo & 1U) == 0;
  local_40 = (ushort)bVar2 << 7;
  VVar4 = VIDEO_state__Fi((int)this->fMenu);
  if (VVar4 == VIDEOSTATE_IDLE) {
    if ((uchar *)0x100 < ticks + -this->fStartTicks) {
      sprintf(acStack144,s__szzzTR_02d_dct_8001190c,PTR_ARRAY_8011650c[0],(int)local_c0.fTrackID);
      VIDEO_spoolfile__FiPc((int)this->fMenu,acStack144);
      VIDEO_startplayback__Fi((int)this->fMenu);
    }
  }
  else {
    iVar8 = VIDEO_updateframexy__Fiii((int)this->fMenu,0x200,((uint)bVar2 << 0x17) >> 0x10);
    index = 0;
    if (iVar8 != 0) {
      uVar6 = this->hVideo + 1;
      local_40 = (ushort)((uVar6 & 1) == 0) << 7;
      this->hVideo = uVar6;
    }
    iVar8 = 0;
    local_2c = 0x40;
    local_30 = 1;
    local_38 = (char)local_40;
    do {
      iVar5 = 0;
      y = (int)(short)iVar8 * 0x40;
      cVar9 = (char)y + local_38;
      do {
        ptVar7 = (tShapeInformation *)((int)&(this->tScreen).fPermShapes + (int)index * 0x30);
        *(short *)(ptVar7[3].fFilename + 0xc) = (short)iVar5 * 0x50 + 0xa0;
        *(short *)(ptVar7[3].fFilename + 0xe) = (short)y + 0x19;
        *(undefined2 *)&ptVar7[3].fLoadCancelled = 0x50;
        *(undefined2 *)((int)&ptVar7[3].fLoadCancelled + 2) = (short)local_2c;
        *(char *)&ptVar7[4].fShapes = (char)iVar5 * '(';
        *(char *)((int)&ptVar7[4].fShapes + 1) = cVar9;
        *(undefined *)((int)&ptVar7[4].fShapes + 2) = 0x28;
        *(undefined *)((int)&ptVar7[4].fShapes + 3) = (char)local_2c;
        if ((int)(short)iVar8 == local_30) {
          *(undefined *)((int)&ptVar7[4].fShapes + 3) = 0x3f;
        }
        uVar6 = GetTPage(2,0,0x200,(int)local_40);
        iVar5 = iVar5 + 1;
        *(short *)&ptVar7[4].fDestFile = (short)uVar6;
        *(undefined2 *)((int)&ptVar7[4].fFile + 2) = 0;
        *(undefined2 *)ptVar7[3].fFilename = 0x20;
        *(undefined4 *)(ptVar7[3].fFilename + 8) = 0x808080;
        ptVar7[3].async_handle = local_30;
        index = index + 1;
      } while (iVar5 * 0x10000 >> 0x10 < 4);
      iVar8 = iVar8 + 1;
    } while (iVar8 * 0x10000 >> 0x10 < 2);
  }
  iVar8 = 0xf0;
  do {
    PSXDrawTransSquare__Fiiiiis((int)&DAT_00303030,(int)(short)iVar8,0xf,2,0x81,1);
    iVar8 = iVar8 + 0x50;
  } while (iVar8 * 0x10000 >> 0x10 < 0x1e0);
  iVar8 = 0x4f;
  do {
    PSXDrawTransSquare__Fiiiiis((int)&DAT_00202020,0xa0,(int)(short)iVar8,0x141,1,1);
    iVar8 = iVar8 + 0x40;
  } while (iVar8 * 0x10000 >> 0x10 < 0x8f);
  FeDraw_SetABRMode__Fi(2);
  iVar8 = 0;
  do {
    DrawTV__FR9tTVConfig((tTVConfig *)(&this->fTransitionDirection + (int)(short)iVar8 * 0x30));
    iVar8 = iVar8 + 1;
  } while (iVar8 * 0x10000 >> 0x10 < 8);
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ GetShapeInfo__16tScreenPinkSlipsRsT1PPcT3(struct tScreenPinkSlips *this /*$s5*/, short *numPermShapes /*$s1*/, short *numSwapShapes /*$s2*/, char **permFileName /*$s4*/, char **swapFileName /*stack 16*/)
 // line 202, offset 0x80039118
	/* begin block 1 */
		// Start line: 203
		// Start offset: 0x80039118
		// Variables:
	// 		struct tTrackInformation trackInfo; // stack offset -80
	/* end block 1 */
	// End offset: 0x80039118
	// End Line: 203

	/* begin block 2 */
		// Start line: 456
	/* end block 2 */
	// End Line: 457

	/* begin block 3 */
		// Start line: 464
	/* end block 3 */
	// End Line: 465

	/* begin block 4 */
		// Start line: 464
	/* end block 4 */
	// End Line: 465

void GetShapeInfo__16tScreenPinkSlipsRsT1PPcT3
               (tScreenPinkSlips *this,short *numPermShapes,short *numSwapShapes,char **permFileName
               ,char **swapFileName)

{
  tTrackInformation local_50;
  
  GetTrack__13tTrackManagersR17tTrackInformation
            (&trackManager,(ushort)(byte)frontEnd.track[0],&local_50);
  *numPermShapes = 0x39;
  *numSwapShapes = 4;
  *permFileName = s_zPink_8001191c;
  sprintf(gSwapFileName,s_TR_02dPS_80011924,(int)local_50.fTrackID);
  *swapFileName = gSwapFileName;
  *(short *)&this->fFrame = (short)local_50.fTrackID;
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Initialize__16tScreenPinkSlips(struct tScreenPinkSlips *this /*$s0*/)
 // line 219, offset 0x800391d8
	/* begin block 1 */
		// Start line: 220
		// Start offset: 0x800391D8
		// Variables:
	// 		struct RECT r; // stack offset -152
	// 		char moviename[80]; // stack offset -144
	// 		struct tTrackInformation trackInfo; // stack offset -64

		/* begin block 1.1 */
			// Start line: 220
			// Start offset: 0x800391D8
			// Variables:
		// 		struct tFEApplication *this; // $v0

			/* begin block 1.1.1 */
				// Start line: 220
				// Start offset: 0x800391D8
			/* end block 1.1.1 */
			// End offset: 0x800391D8
			// End Line: 220
		/* end block 1.1 */
		// End offset: 0x800391D8
		// End Line: 220

		/* begin block 1.2 */
			// Start line: 220
			// Start offset: 0x800391D8

			/* begin block 1.2.1 */
				// Start line: 220
				// Start offset: 0x800391D8
			/* end block 1.2.1 */
			// End offset: 0x800391D8
			// End Line: 220
		/* end block 1.2 */
		// End offset: 0x800391D8
		// End Line: 220
	/* end block 1 */
	// End offset: 0x800391D8
	// End Line: 220

	/* begin block 2 */
		// Start line: 504
	/* end block 2 */
	// End Line: 505

	/* begin block 3 */
		// Start line: 509
	/* end block 3 */
	// End Line: 510

	/* begin block 4 */
		// Start line: 509
	/* end block 4 */
	// End Line: 510

void Initialize__16tScreenPinkSlips(tScreenPinkSlips *this)

{
  uchar *puVar1;
  tMenu *handle;
  short local_98;
  undefined2 local_96;
  undefined2 local_94;
  undefined2 local_92;
  char acStack144 [80];
  tTrackInformation local_40;
  
  local_98 = 0x200;
  local_94 = 0xaa;
  local_96 = 0;
  local_92 = 0x100;
  ClearImage(&local_98,0,0,0);
  DrawSync(0);
  frontEnd.pinkSlipsTrackIndex = '\0';
  Decrement__18tListIteratorTrack7tPlayer
            ((tListIteratorTrack *)
             &(menuDefs->itemTrack3).tMenuItemLeftRightChoice.tMenuItemInteractive.tMenuItem.
              fNumFrames,~kPlayerOne);
  Increment__18tListIteratorTrack7tPlayer
            ((tListIteratorTrack *)
             &(menuDefs->itemTrack3).tMenuItemLeftRightChoice.tMenuItemInteractive.tMenuItem.
              fNumFrames,~kPlayerOne);
  *(_func_45 **)((this->tScreen)._vf + 6) = FEApp->fCurrentMenu[0];
  Initialize__7tScreen((tScreen *)this);
  *(undefined4 *)&this->fImageTVs[3].flip_axis = 0;
  GetTrack__13tTrackManagersR17tTrackInformation
            (&trackManager,(ushort)(byte)frontEnd.track[0],&local_40);
  sprintf(acStack144,s__szzzTR_02d_dct_8001190c,PTR_ARRAY_8011650c[0],(int)local_40.fTrackID);
  handle = (tMenu *)VIDEO_create__Fiiiii(0xa0,0x80,0xf0000,0x20000,0x10);
  this->fMenu = handle;
  VIDEO_spoolfile__FiPc((int)handle,acStack144);
  VIDEO_startplayback__Fi((int)this->fMenu);
  puVar1 = ticks;
  this->hVideo = 0;
  *(undefined2 *)((int)&this->fFrame + 2) = 0;
  this->fPreviousTrack = 0;
  *(undefined4 *)&this->fImageTVs[3].flip_axis = 0;
  *(undefined *)&this->fTVTicks = 1;
  *(uchar **)&this->fStartTicks = puVar1;
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Cleanup__16tScreenPinkSlips(struct tScreenPinkSlips *this /*$s0*/)
 // line 263, offset 0x80039320
	/* begin block 1 */
		// Start line: 264
		// Start offset: 0x80039320
	/* end block 1 */
	// End offset: 0x80039320
	// End Line: 264

	/* begin block 2 */
		// Start line: 620
	/* end block 2 */
	// End Line: 621

	/* begin block 3 */
		// Start line: 620
	/* end block 3 */
	// End Line: 621

	/* begin block 4 */
		// Start line: 624
	/* end block 4 */
	// End Line: 625

	/* begin block 5 */
		// Start line: 624
	/* end block 5 */
	// End Line: 625

void Cleanup__16tScreenPinkSlips(tScreenPinkSlips *this)

{
  VIDEO_destroy__Fi((int)this->fMenu);
  purgememadr((int)this->fMenu);
  frontEnd.pinkSlipsTrackIndex = '\0';
  Cleanup__7tScreen((tScreen *)this);
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ UpdateVideoWall__16tScreenPinkSlipsR17tTrackInformation(struct tScreenPinkSlips *this /*$s1*/, struct tTrackInformation *trackInfo /*$s2*/)
 // line 300, offset 0x80039368
	/* begin block 1 */
		// Start line: 301
		// Start offset: 0x80039368

		/* begin block 1.1 */
			// Start line: 301
			// Start offset: 0x80039368

			/* begin block 1.1.1 */
				// Start line: 303
				// Start offset: 0x8003939C

				/* begin block 1.1.1.1 */
					// Start line: 304
					// Start offset: 0x8003939C

					/* begin block 1.1.1.1.1 */
						// Start line: 310
						// Start offset: 0x800393DC

						/* begin block 1.1.1.1.1.1 */
							// Start line: 310
							// Start offset: 0x800393DC

							/* begin block 1.1.1.1.1.1.1 */
								// Start line: 310
								// Start offset: 0x800393DC
							/* end block 1.1.1.1.1.1.1 */
							// End offset: 0x800393DC
							// End Line: 310
						/* end block 1.1.1.1.1.1 */
						// End offset: 0x800393DC
						// End Line: 310
					/* end block 1.1.1.1.1 */
					// End offset: 0x800393F0
					// End Line: 312
				/* end block 1.1.1.1 */
				// End offset: 0x800393F0
				// End Line: 312
			/* end block 1.1.1 */
			// End offset: 0x800393FC
			// End Line: 316
		/* end block 1.1 */
		// End offset: 0x800393FC
		// End Line: 316
	/* end block 1 */
	// End offset: 0x800393FC
	// End Line: 316

	/* begin block 2 */
		// Start line: 594
	/* end block 2 */
	// End Line: 595

	/* begin block 3 */
		// Start line: 674
	/* end block 3 */
	// End Line: 675

	/* begin block 4 */
		// Start line: 674
	/* end block 4 */
	// End Line: 675

void UpdateVideoWall__16tScreenPinkSlipsR17tTrackInformation
               (tScreenPinkSlips *this,tTrackInformation *trackInfo)

{
  uchar *puVar1;
  
  if ((int)trackInfo->fTrackID != (int)*(short *)&this->fFrame) {
    sprintf(gSwapFileName,s_TR_02dPS_80011924,(int)trackInfo->fTrackID);
    AsyncLoadSwapShapeFile__7tScreenPc((tScreen *)this,gSwapFileName);
    *(undefined4 *)&this->fImageTVs[3].flip_axis = 0;
    *(short *)&this->fFrame = (short)trackInfo->fTrackID;
    puVar1 = ticks;
    if (-1 < *(char *)&this->fTVTicks) {
      *(undefined *)&this->fTVTicks = 0xff;
      *(uchar **)&this->fStartTicks = puVar1;
    }
    VIDEO_abortplayback__Fi((int)this->fMenu);
  }
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ DrawVideoWall__16tScreenPinkSlips(struct tScreenPinkSlips *this /*$s2*/)
 // line 324, offset 0x80039414
	/* begin block 1 */
		// Start line: 325
		// Start offset: 0x80039414
		// Variables:
	// 		short i; // $s0
	// 		short j; // $s1

		/* begin block 1.1 */
			// Start line: 341
			// Start offset: 0x800394E8

			/* begin block 1.1.1 */
				// Start line: 341
				// Start offset: 0x800394E8
			/* end block 1.1.1 */
			// End offset: 0x800394E8
			// End Line: 341
		/* end block 1.1 */
		// End offset: 0x800394E8
		// End Line: 341
	/* end block 1 */
	// End offset: 0x80039670
	// End Line: 368

	/* begin block 2 */
		// Start line: 715
	/* end block 2 */
	// End Line: 716

	/* begin block 3 */
		// Start line: 724
	/* end block 3 */
	// End Line: 725

	/* begin block 4 */
		// Start line: 724
	/* end block 4 */
	// End Line: 725

void DrawVideoWall__16tScreenPinkSlips(tScreenPinkSlips *this)

{
  short sVar1;
  int iVar2;
  int iVar3;
  
  iVar3 = 0;
  iVar2 = 0;
  do {
    DrawShapeExtended__FiiiiiiP18tDrawShapeExtended
              (iVar2 >> 0x10,0,0,0,0,0,(tDrawShapeExtended *)0x0);
    iVar3 = iVar3 + 1;
    iVar2 = iVar3 * 0x10000;
  } while (iVar3 * 0x10000 >> 0x10 < 0x24);
  if ((((this->tScreen).fSwapShapes.fFlags & 1) != 0) &&
     (*(int *)&this->fImageTVs[3].flip_axis == 0)) {
    iVar3 = 0;
    iVar2 = 0;
    do {
      InitTV__FR9tTVConfigP18tTexture_ShapeInfos
                ((tTVConfig *)&this->fTrackTVs[(iVar2 >> 0x10) + 7].flip_axis,
                 (this->tScreen).fSwapShapes.fShapes,(short)((uint)iVar2 >> 0x10));
      iVar3 = iVar3 + 1;
      iVar2 = iVar3 * 0x10000;
    } while (iVar3 * 0x10000 >> 0x10 < 4);
    *(undefined4 *)&this->fImageTVs[3].flip_axis = 1;
  }
  sVar1 = (short)((uint)(ticks + -this->fStartTicks) >> 2);
  if (*(char *)&this->fTVTicks < '\x01') {
    iVar3 = 0;
    if (0 < (int)sVar1) {
      iVar2 = 0;
      do {
        if (3 < iVar2 >> 0x10) break;
        if (*(int *)&this->fTrackTVs[(uint)(byte)imageTVOrder[iVar2 >> 0x10] + 7].flip_axis == 1) {
          TurnOffTV__FR9tTVConfig
                    ((tTVConfig *)
                     &this->fTrackTVs[(uint)(byte)imageTVOrder[iVar2 >> 0x10] + 7].flip_axis);
        }
        iVar3 = iVar3 + 1;
        iVar2 = iVar3 * 0x10000;
      } while (iVar3 * 0x10000 >> 0x10 < (int)sVar1);
    }
    iVar3 = 0;
    if (sVar1 < 8) goto LAB_80039634;
    *(undefined *)&this->fTVTicks = 0;
  }
  else {
    iVar3 = 0;
    if (0 < (int)sVar1) {
      iVar2 = 0;
      while (iVar2 < 4) {
        if (*(int *)&this->fTrackTVs[(uint)(byte)imageTVOrder[iVar2] + 7].flip_axis == 0) {
          TurnOnTV__FR9tTVConfig
                    ((tTVConfig *)&this->fTrackTVs[(uint)(byte)imageTVOrder[iVar2] + 7].flip_axis);
        }
        iVar3 = iVar3 + 1;
        if ((int)sVar1 <= iVar3 * 0x10000 >> 0x10) break;
        iVar2 = (int)(short)iVar3;
      }
    }
  }
  iVar3 = 0;
LAB_80039634:
  do {
    DrawTV__FR9tTVConfig((tTVConfig *)&this->fTrackTVs[(int)(short)iVar3 + 7].flip_axis);
    iVar3 = iVar3 + 1;
  } while (iVar3 * 0x10000 >> 0x10 < 4);
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ ProcessInput__16tScreenPinkSlips7tPlayerR13tInputKeyTypeR12tMenuCommand(struct tScreenPinkSlips *this /*$a0*/, enum tInputKeyType *keyval /*$a2*/)
 // line 371, offset 0x80039690
	/* begin block 1 */
		// Start line: 372
		// Start offset: 0x80039690
		// Variables:
	// 		struct tTrackInformation trackInfo; // stack offset -56

		/* begin block 1.1 */
			// Start line: 372
			// Start offset: 0x80039690

			/* begin block 1.1.1 */
				// Start line: 376
				// Start offset: 0x800396AC

				/* begin block 1.1.1.1 */
					// Start line: 377
					// Start offset: 0x800396AC

					/* begin block 1.1.1.1.1 */
						// Start line: 377
						// Start offset: 0x800396AC
					/* end block 1.1.1.1.1 */
					// End offset: 0x800396AC
					// End Line: 377
				/* end block 1.1.1.1 */
				// End offset: 0x800396AC
				// End Line: 377

				/* begin block 1.1.1.2 */
					// Start line: 377
					// Start offset: 0x800396AC

					/* begin block 1.1.1.2.1 */
						// Start line: 383
						// Start offset: 0x80039708

						/* begin block 1.1.1.2.1.1 */
							// Start line: 383
							// Start offset: 0x80039708

							/* begin block 1.1.1.2.1.1.1 */
								// Start line: 383
								// Start offset: 0x80039708
							/* end block 1.1.1.2.1.1.1 */
							// End offset: 0x8003970C
							// End Line: 383
						/* end block 1.1.1.2.1.1 */
						// End offset: 0x8003970C
						// End Line: 383
					/* end block 1.1.1.2.1 */
					// End offset: 0x8003970C
					// End Line: 383
				/* end block 1.1.1.2 */
				// End offset: 0x8003970C
				// End Line: 383

				/* begin block 1.1.1.3 */
					// Start line: 384
					// Start offset: 0x8003970C

					/* begin block 1.1.1.3.1 */
						// Start line: 385
						// Start offset: 0x80039720

						/* begin block 1.1.1.3.1.1 */
							// Start line: 385
							// Start offset: 0x80039720

							/* begin block 1.1.1.3.1.1.1 */
								// Start line: 385
								// Start offset: 0x80039720
							/* end block 1.1.1.3.1.1.1 */
							// End offset: 0x80039738
							// End Line: 385
						/* end block 1.1.1.3.1.1 */
						// End offset: 0x80039738
						// End Line: 385
					/* end block 1.1.1.3.1 */
					// End offset: 0x80039738
					// End Line: 385
				/* end block 1.1.1.3 */
				// End offset: 0x80039738
				// End Line: 385

				/* begin block 1.1.1.4 */
					// Start line: 386
					// Start offset: 0x80039738

					/* begin block 1.1.1.4.1 */
						// Start line: 387
						// Start offset: 0x80039748

						/* begin block 1.1.1.4.1.1 */
							// Start line: 387
							// Start offset: 0x80039748

							/* begin block 1.1.1.4.1.1.1 */
								// Start line: 387
								// Start offset: 0x80039748
							/* end block 1.1.1.4.1.1.1 */
							// End offset: 0x80039760
							// End Line: 387
						/* end block 1.1.1.4.1.1 */
						// End offset: 0x80039760
						// End Line: 387
					/* end block 1.1.1.4.1 */
					// End offset: 0x80039760
					// End Line: 387
				/* end block 1.1.1.4 */
				// End offset: 0x80039760
				// End Line: 387

				/* begin block 1.1.1.5 */
					// Start line: 388
					// Start offset: 0x80039760

					/* begin block 1.1.1.5.1 */
						// Start line: 389
						// Start offset: 0x80039788

						/* begin block 1.1.1.5.1.1 */
							// Start line: 389
							// Start offset: 0x80039788

							/* begin block 1.1.1.5.1.1.1 */
								// Start line: 389
								// Start offset: 0x80039788
							/* end block 1.1.1.5.1.1.1 */
							// End offset: 0x800397A0
							// End Line: 389
						/* end block 1.1.1.5.1.1 */
						// End offset: 0x800397A0
						// End Line: 389
					/* end block 1.1.1.5.1 */
					// End offset: 0x800397A0
					// End Line: 389
				/* end block 1.1.1.5 */
				// End offset: 0x800397A0
				// End Line: 389

				/* begin block 1.1.1.6 */
					// Start line: 389
					// Start offset: 0x800397A0

					/* begin block 1.1.1.6.1 */
						// Start line: 389
						// Start offset: 0x800397A0
					/* end block 1.1.1.6.1 */
					// End offset: 0x800397BC
					// End Line: 389
				/* end block 1.1.1.6 */
				// End offset: 0x800397BC
				// End Line: 389
			/* end block 1.1.1 */
			// End offset: 0x800397BC
			// End Line: 390
		/* end block 1.1 */
		// End offset: 0x800397BC
		// End Line: 390
	/* end block 1 */
	// End offset: 0x800397BC
	// End Line: 390

	/* begin block 2 */
		// Start line: 817
	/* end block 2 */
	// End Line: 818

	/* begin block 3 */
		// Start line: 821
	/* end block 3 */
	// End Line: 822

	/* begin block 4 */
		// Start line: 821
	/* end block 4 */
	// End Line: 822

void ProcessInput__16tScreenPinkSlips7tPlayerR13tInputKeyTypeR12tMenuCommand
               (tScreenPinkSlips *this,tInputKeyType *keyval)

{
  tGlobalMenuDefs *ptVar1;
  uint uVar2;
  int *in_a2;
  tTrackInformation tStack56;
  
  if (*in_a2 == 8) {
    GetTrack__13tTrackManagersR17tTrackInformation
              (&trackManager,(ushort)(byte)frontEnd.track[(uint)(byte)frontEnd.pinkSlipsTrackIndex],
               &tStack56);
    ptVar1 = menuDefs;
    uVar2 = (menuDefs->menuTestDriveTrackSelect).tMenu.fCurrentItem & 0xfffffffe;
    (menuDefs->menuTestDriveTrackSelect).tMenu.fCurrentItem = uVar2;
    if ((frontEnd.gameMode != '\x01') && (frontEnd.oppNumber == '\x02')) {
      (ptVar1->menuTestDriveTrackSelect).tMenu.fCurrentItem = uVar2 | 1;
    }
    if (2 < tStack56.fTrackDifficulty) {
      (menuDefs->menuTestDriveTrackSelect).tMenu.fCurrentItem =
           (menuDefs->menuTestDriveTrackSelect).tMenu.fCurrentItem | 1;
    }
    if (tStack56.fIsEgg != '\0') {
      (menuDefs->menuTestDriveTrackSelect).tMenu.fCurrentItem =
           (menuDefs->menuTestDriveTrackSelect).tMenu.fCurrentItem | 1;
    }
    if ((frontEnd.gameMode == '\x01') && (frontEnd.raceType == '\x01')) {
      (menuDefs->menuTestDriveTrackSelect).tMenu.fCurrentItem =
           (menuDefs->menuTestDriveTrackSelect).tMenu.fCurrentItem | 1;
    }
    (menuDefs->menuTestDriveTrackSelect).tMenu.fItemList[7] =
         (_func_21 *)((uint)(menuDefs->menuTestDriveTrackSelect).tMenu.fItemList[7] | 1);
  }
  return;
}





