#include "THISDUST.H"
#include "FRONT.H"


// decompiled code
// original method signature: 
// struct tAllScreens * /*$ra*/ __11tAllScreens(struct tAllScreens *this /*$s1*/)
 // line 226, offset 0x8002baf4
	/* begin block 1 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenMain *this; // $s1
	/* end block 1 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 2 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenCarSelectDuel *this; // $s0
	/* end block 2 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 3 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenCarSelectTwoPlayer *this; // $s2

		/* begin block 3.1 */
			// Start line: 227
			// Start offset: 0x8002BAF4
			// Variables:
		// 		struct tDialogBackUpOnly *this; // $s0

			/* begin block 3.1.1 */
				// Start line: 227
				// Start offset: 0x8002BAF4
				// Variables:
			// 		struct tDialogMessageString *this; // $s0

				/* begin block 3.1.1.1 */
					// Start line: 227
					// Start offset: 0x8002BAF4
					// Variables:
				// 		struct tDialogBase *this; // $s0

					/* begin block 3.1.1.1.1 */
						// Start line: 227
						// Start offset: 0x8002BAF4
					/* end block 3.1.1.1.1 */
					// End offset: 0x8002BAF4
					// End Line: 227
				/* end block 3.1.1.1 */
				// End offset: 0x8002BAF4
				// End Line: 227

				/* begin block 3.1.1.2 */
					// Start line: 227
					// Start offset: 0x8002BAF4
				/* end block 3.1.1.2 */
				// End offset: 0x8002BAF4
				// End Line: 227
			/* end block 3.1.1 */
			// End offset: 0x8002BAF4
			// End Line: 227
		/* end block 3.1 */
		// End offset: 0x8002BAF4
		// End Line: 227
	/* end block 3 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 4 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenCarSelectTwoPlayer *this; // $s2

		/* begin block 4.1 */
			// Start line: 227
			// Start offset: 0x8002BAF4
			// Variables:
		// 		struct tDialogBackUpOnly *this; // $s0

			/* begin block 4.1.1 */
				// Start line: 227
				// Start offset: 0x8002BAF4
				// Variables:
			// 		struct tDialogMessageString *this; // $s0

				/* begin block 4.1.1.1 */
					// Start line: 227
					// Start offset: 0x8002BAF4
					// Variables:
				// 		struct tDialogBase *this; // $s0

					/* begin block 4.1.1.1.1 */
						// Start line: 227
						// Start offset: 0x8002BAF4
					/* end block 4.1.1.1.1 */
					// End offset: 0x8002BAF4
					// End Line: 227
				/* end block 4.1.1.1 */
				// End offset: 0x8002BAF4
				// End Line: 227

				/* begin block 4.1.1.2 */
					// Start line: 227
					// Start offset: 0x8002BAF4
				/* end block 4.1.1.2 */
				// End offset: 0x8002BAF4
				// End Line: 227
			/* end block 4.1.1 */
			// End offset: 0x8002BAF4
			// End Line: 227
		/* end block 4.1 */
		// End offset: 0x8002BAF4
		// End Line: 227
	/* end block 4 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 5 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenPinkSlipsCarSelect *this; // $s5

		/* begin block 5.1 */
			// Start line: 227
			// Start offset: 0x8002BAF4
			// Variables:
		// 		struct tScreenCarSelectTwoPlayer *this; // $s5

			/* begin block 5.1.1 */
				// Start line: 227
				// Start offset: 0x8002BAF4
				// Variables:
			// 		struct tDialogBackUpOnly *this; // $s0

				/* begin block 5.1.1.1 */
					// Start line: 227
					// Start offset: 0x8002BAF4
					// Variables:
				// 		struct tDialogMessageString *this; // $s0

					/* begin block 5.1.1.1.1 */
						// Start line: 227
						// Start offset: 0x8002BAF4
						// Variables:
					// 		struct tDialogBase *this; // $s0

						/* begin block 5.1.1.1.1.1 */
							// Start line: 227
							// Start offset: 0x8002BAF4
						/* end block 5.1.1.1.1.1 */
						// End offset: 0x8002BAF4
						// End Line: 227
					/* end block 5.1.1.1.1 */
					// End offset: 0x8002BAF4
					// End Line: 227

					/* begin block 5.1.1.1.2 */
						// Start line: 227
						// Start offset: 0x8002BAF4
					/* end block 5.1.1.1.2 */
					// End offset: 0x8002BAF4
					// End Line: 227
				/* end block 5.1.1.1 */
				// End offset: 0x8002BAF4
				// End Line: 227
			/* end block 5.1.1 */
			// End offset: 0x8002BAF4
			// End Line: 227
		/* end block 5.1 */
		// End offset: 0x8002BAF4
		// End Line: 227
	/* end block 5 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 6 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenPinkSlipsCarSelect *this; // $s6

		/* begin block 6.1 */
			// Start line: 227
			// Start offset: 0x8002BAF4
			// Variables:
		// 		struct tScreenCarSelectTwoPlayer *this; // $s6

			/* begin block 6.1.1 */
				// Start line: 227
				// Start offset: 0x8002BAF4
				// Variables:
			// 		struct tDialogBackUpOnly *this; // $s0

				/* begin block 6.1.1.1 */
					// Start line: 227
					// Start offset: 0x8002BAF4
					// Variables:
				// 		struct tDialogMessageString *this; // $s0

					/* begin block 6.1.1.1.1 */
						// Start line: 227
						// Start offset: 0x8002BAF4
						// Variables:
					// 		struct tDialogBase *this; // $s0

						/* begin block 6.1.1.1.1.1 */
							// Start line: 227
							// Start offset: 0x8002BAF4
						/* end block 6.1.1.1.1.1 */
						// End offset: 0x8002BAF4
						// End Line: 227
					/* end block 6.1.1.1.1 */
					// End offset: 0x8002BAF4
					// End Line: 227

					/* begin block 6.1.1.1.2 */
						// Start line: 227
						// Start offset: 0x8002BAF4
					/* end block 6.1.1.1.2 */
					// End offset: 0x8002BAF4
					// End Line: 227
				/* end block 6.1.1.1 */
				// End offset: 0x8002BAF4
				// End Line: 227
			/* end block 6.1.1 */
			// End offset: 0x8002BAF4
			// End Line: 227
		/* end block 6.1 */
		// End offset: 0x8002BAF4
		// End Line: 227
	/* end block 6 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 7 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenTrackRecords *this; // $s5
	/* end block 7 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 8 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenTrackInfo *this; // $s2
	/* end block 8 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 9 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenTrackSelect *this; // $s0
	/* end block 9 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 10 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenTournamentTrophy *this; // $s0

		/* begin block 10.1 */
			// Start line: 227
			// Start offset: 0x8002BAF4
			// Variables:
		// 		struct tScreenCongrats *this; // $s0
		/* end block 10.1 */
		// End offset: 0x8002BAF4
		// End Line: 227
	/* end block 10 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 11 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenTrophyInfo *this; // $s0
	/* end block 11 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 12 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenDisplay *this; // $s0
	/* end block 12 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 13 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenUserName *this; // $s0
	/* end block 13 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 14 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenPinkSlipCongrats *this; // $s2

		/* begin block 14.1 */
			// Start line: 227
			// Start offset: 0x8002BAF4
			// Variables:
		// 		struct tScreenCongrats *this; // $s2
		/* end block 14.1 */
		// End offset: 0x8002BAF4
		// End Line: 227
	/* end block 14 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 15 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenPinkSlipStandings *this; // $s0

		/* begin block 15.1 */
			// Start line: 227
			// Start offset: 0x8002BAF4
			// Variables:
		// 		struct tScreenTournamentStandings3item *this; // $s0
		/* end block 15.1 */
		// End offset: 0x8002BAF4
		// End Line: 227
	/* end block 15 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 16 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenTournamentStandings3item *this; // $s3
	/* end block 16 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 17 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenPinkSlips *this; // $s2
	/* end block 17 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 18 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenBeTheCopCongrats *this; // $s3

		/* begin block 18.1 */
			// Start line: 227
			// Start offset: 0x8002BAF4
			// Variables:
		// 		struct tScreenCongrats *this; // $s3
		/* end block 18.1 */
		// End offset: 0x8002BAF4
		// End Line: 227
	/* end block 18 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 19 */
		// Start line: 227
		// Start offset: 0x8002BAF4
		// Variables:
	// 		struct tScreenTournamentCongrats *this; // $s0

		/* begin block 19.1 */
			// Start line: 227
			// Start offset: 0x8002BAF4
			// Variables:
		// 		struct tScreenCongrats *this; // $s0
		/* end block 19.1 */
		// End offset: 0x8002BAF4
		// End Line: 227
	/* end block 19 */
	// End offset: 0x8002BAF4
	// End Line: 227

	/* begin block 20 */
		// Start line: 3761
	/* end block 20 */
	// End Line: 3762

	/* begin block 21 */
		// Start line: 458
	/* end block 21 */
	// End Line: 459

	/* begin block 22 */
		// Start line: 452
	/* end block 22 */
	// End Line: 453

/* WARNING: Type propagation algorithm not settling */

tAllScreens * __11tAllScreens(tAllScreens *this)

{
  __7tScreen((tScreen *)this);
  *(undefined4 *)((this->screenMain).tScreen._vf + 2) = 0x800118b0;
  __16tScreenCarSelect((tScreenCarSelect *)&(this->screenMain).fNumTVsInTransition);
  __16tScreenCarSelect((tScreenCarSelect *)&(this->screenCarSelect).fSplineInterval);
  (this->screenCarSelectDuel).tScreenCarSelect.tScreen.fInternalScreenFadeVal = -0x7ffee380;
  __16tScreenCarSelect
            ((tScreenCarSelect *)((this->screenCarSelectDuel).fOpponentShapes.fFilename + 8));
  *(undefined **)&(this->screenCarSelectTwoPlayer).tScreenCarSelect.tScreen.fTransitionOff = &table;
  __7tScreen((tScreen *)&(this->screenCarSelectTwoPlayer).tScreenCarSelect.fSpeechTicks);
  (this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.height = 0x120;
  (this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.tScreen.
  fTransitionTicks = -0x7ffefa50;
  *(undefined4 *)
   ((this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.tScreen._vf + 2) = 0
  ;
  *(undefined2 *)
   (this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.tScreen._vf = 0;
  (this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.reservedheight = 0;
  (this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.width = 0;
  (this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.top = 0;
  (this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.tScreen.fScreenFadeVal
       = 0;
  *(undefined2 *)
   ((int)&(this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.tScreen.
          fInternalScreenFadeVal + 2) = 0;
  *(undefined2 *)
   &(this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.tScreen.
    fInternalScreenFadeVal = 0;
  *(undefined2 *)
   ((int)&(this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.tScreen.
          fTransitionOff + 2) = 0;
  *(undefined2 *)
   &(this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.tScreen.
    fTransitionOff = 0xffff;
  *(undefined2 *)
   &(this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.startTicks = 0;
  *(undefined4 *)
   &(this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.specificPlayer = 0;
  (this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.tScreen.
  fTransitionTicks = -0x7ffefb10;
  *(undefined4 *)&(this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.MaxW =
       0;
  (this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.currentlyOn =
       (void *)0x0;
  *(undefined4 *)
   &(this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.specificPlayer = 0;
  (this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.timeOutTicks = 0x80;
  (this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.tScreen.
  fTransitionTicks = -0x7ffefb70;
  __16tScreenCarSelect
            ((tScreenCarSelect *)
             &(this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.fFullyOpen
            );
  *(undefined **)
   &(this->screenCarSelectPlayerTwo).tScreenCarSelect.tScreen.fSwapShapes.fLoadCancelled = &table;
  __7tScreen((tScreen *)&(this->screenCarSelectPlayerTwo).tScreenCarSelect.fInShowroom);
  (this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.specificPlayer = 0x120
  ;
  *(undefined4 *)
   ((int)(this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen.
         fSwapShapes.fFilename + 0xc) = 0x800105b0;
  (this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen.
  fInternalScreenFadeVal = 0;
  *(undefined2 *)
   ((int)&(this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen.
          fTransitionOff + 2) = 0;
  (this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.left = 0;
  *(undefined2 *)
   ((this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen._vf + 8) = 0
  ;
  *(undefined2 *)
   ((this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen._vf + 6) = 0
  ;
  *(undefined2 *)
   &(this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen.
    fTransitionOff = 0;
  *(undefined2 *)
   ((int)&(this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen.
          fTransitionTicks + 2) = 0;
  *(undefined2 *)
   &(this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen.
    fTransitionTicks = 0;
  *(undefined2 *)
   ((int)&(this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen.
          fSwapShapes.fLoadCancelled + 2) = 0;
  *(undefined2 *)
   &(this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen.fSwapShapes.
    fLoadCancelled = 0xffff;
  (this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.height = 0;
  *(undefined4 *)
   ((this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen._vf + 2) = 0
  ;
  *(undefined4 *)
   ((int)(this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen.
         fSwapShapes.fFilename + 0xc) = 0x800104f0;
  (this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.timeOutTicks = 0;
  *(undefined4 *)&(this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.top =
       0;
  *(undefined4 *)
   ((this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen._vf + 2) = 0
  ;
  (this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.currentlyOn =
       (void *)0x80;
  *(undefined4 *)
   ((int)(this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.tScreen.
         fSwapShapes.fFilename + 0xc) = 0x80010490;
  __16tScreenCarSelect
            ((tScreenCarSelect *)
             &(this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.OffsetX);
  *(undefined4 *)
   ((this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.tScreenCarSelect.tScreen.
    fSwapShapes.fFilename + 8) = 0x80011bf0;
  __7tScreen((tScreen *)
             ((this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.tScreenCarSelect.
              fFadeTicks + 1));
  *(undefined2 *)
   ((int)(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
         tDialogMessageString.tDialogBase.tScreen._vf + 2) = 0x120;
  *(undefined4 *)
   ((int)&(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x18) = 0x800105b0;
  (this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.tDialogMessageString
  .tDialogBase.tScreen.fTransitionTicks = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x26) = 0;
  *(undefined2 *)
   ((int)(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
         tDialogMessageString.tDialogBase.tScreen._vf + 4) = 0;
  *(undefined2 *)
   (this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
   tDialogMessageString.tDialogBase.tScreen._vf = 0;
  (this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.tDialogMessageString
  .tDialogBase.tScreen.fScreenFadeVal = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x24) = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x22) = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x20) = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x1e) = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x1c) = 0xffff;
  (this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.tDialogMessageString
  .tDialogBase.specificPlayer = 0;
  (this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.tDialogMessageString
  .tDialogBase.tScreen.fInternalScreenFadeVal = 0;
  *(undefined4 *)
   ((int)&(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x18) = 0x800104f0;
  (this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.tDialogMessageString
  .tDialogBase.currentlyOn = (void *)0x0;
  *(undefined4 *)
   ((int)(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
         tDialogMessageString.tDialogBase.tScreen._vf + 6) = 0;
  (this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.tDialogMessageString
  .tDialogBase.tScreen.fInternalScreenFadeVal = 0;
  *(undefined4 *)
   &(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
    tDialogMessageString.tDialogBase.top = 0x80;
  *(undefined4 *)
   ((int)&(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x18) = 0x80010490;
  *(undefined4 *)
   ((this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.tScreenCarSelect.tScreen.
    fSwapShapes.fFilename + 8) = 0x80011b60;
  __16tScreenCarSelect
            ((tScreenCarSelect *)
             &(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
              tDialogMessageString.tDialogBase.fDefault);
  *(undefined4 *)
   (this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.tScreenCarSelect.tScreen.
   fSwapShapes.fFilename = 0x80011bf0;
  __7tScreen((tScreen *)
             (this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.tScreenCarSelect.
             fDestBrightness);
  *(undefined2 *)
   &(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
    tDialogMessageString.tDialogBase.tScreen.fInternalScreenFadeVal = 0x120;
  *(undefined4 *)
   ((int)&(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x10) = 0x800105b0;
  *(undefined4 *)
   ((int)&(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x20) = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x1e) = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fInternalScreenFadeVal + 2) = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fTransitionOff + 2) = 0;
  *(undefined2 *)
   &(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
    tDialogMessageString.tDialogBase.tScreen.fTransitionOff = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x1c) = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x1a) = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x18) = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x16) = 0;
  *(undefined2 *)
   ((int)&(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x14) = 0xffff;
  *(undefined2 *)
   ((int)(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
         tDialogMessageString.tDialogBase.tScreen._vf + 2) = 0;
  (this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.tDialogMessageString
  .tDialogBase.tScreen.fTransitionTicks = 0;
  *(undefined4 *)
   ((int)&(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x10) = 0x800104f0;
  *(undefined4 *)
   &(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
    tDialogMessageString.tDialogBase.top = 0;
  *(undefined4 *)
   &(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
    tDialogMessageString.tDialogBase.tScreen.fScreenFadeVal = 0;
  (this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.tDialogMessageString
  .tDialogBase.tScreen.fTransitionTicks = 0;
  *(undefined4 *)
   ((int)(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
         tDialogMessageString.tDialogBase.tScreen._vf + 6) = 0x80;
  *(undefined4 *)
   ((int)&(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
          tDialogMessageString.tDialogBase.tScreen.fSwapShapes + 0x10) = 0x80010490;
  *(undefined4 *)
   (this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.tScreenCarSelect.tScreen.
   fSwapShapes.fFilename = 0x80011b60;
  __7tScreen((tScreen *)
             &(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
              tDialogMessageString.tDialogBase.MaxW);
  (this->screenTrackRecords).tScreen.fSwapShapes.async_handle = 0x80011ff0;
  __7tScreen((tScreen *)((this->screenTrackRecords).tScreen.fSwapShapes.fFilename + 0xc));
  (this->screenTrackInfo).tScreen.fSwapShapes.fDestFile = &table;
  __7tScreen((tScreen *)&(this->screenTrackInfo).fVideoWall.fFirstTVShape);
  (this->screenTrackSelect).tScreen.fSwapShapes.fFile = &table;
  __18tScreenTournSelect((tScreenTournSelect *)&(this->screenTrackSelect).fVideoWall.fTVShapes);
  __26tScreenTournamentStandings
            ((tScreenTournamentStandings *)&(this->screenTournSelect).trophyTV[3].tint);
  __7tScreen((tScreen *)&(this->screenTournamentStandings).tScreen.fInternalScreenFadeVal);
  *(undefined4 *)
   ((this->screenTournamentTrophy).tScreenCongrats.tScreen.fPermShapes.fFilename + 0xc) = 0x800123e0
  ;
  __17tScreenTrophyRoom
            ((tScreenTrophyRoom *)
             ((this->screenTournamentTrophy).tScreenCongrats.fCarInfo.fColorOrder + 1));
  __7tScreen((tScreen *)((this->screenTrophyRoom).fTrophyList + 0x1c));
  *(undefined4 *)((this->screenTrophyInfo).tScreen.fPermShapes.fFilename + 4) = 0x80011e90;
  __23tScreenControllerConfig
            ((tScreenControllerConfig *)
             ((this->screenTrophyInfo).tScreen.fPermShapes.fFilename + 0xc));
  __7tScreen((tScreen *)
             &(this->screenControllerConfig).negconPopUp.tDialogInteractive.tDialogMessageString.
              tDialogBase.currentlyOn);
  (this->screenDisplay).tScreen.fPermShapes.async_handle = 0x800120d0;
  __12tScreenAudio((tScreenAudio *)&(this->screenDisplay).tScreen.fPermShapes.fNumShapes);
  __14tScreenMemcard((tScreenMemcard *)&(this->screenAudio).tScreen.fPermShapes.fLoadCancelled);
  __7tScreen((tScreen *)((this->screenMemcard).fFadeIcon + 9));
  (this->screenUserName).tScreen.fPermShapes.fShapes = (tTexture_ShapeInfo *)0x800126e8;
  __7tScreen((tScreen *)&(this->screenUserName).fTextFade);
  *(undefined4 *)((this->screenUserName).fRowList + 0x58) = 0x80012378;
  __26tScreenTournamentStandings
            ((tScreenTournamentStandings *)
             ((this->screenPinkSlipCongrats).tScreenCongrats.fCarInfo.fSpeechColors + 8));
  (this->screenPinkSlipCongrats).tScreenCongrats.fCarCY = -0.00000000;
  __26tScreenTournamentStandings
            ((tScreenTournamentStandings *)
             &(this->screenPinkSlipStandings).tScreenTournamentStandings3item.
              tScreenTournamentStandings.tScreen.fSwapShapes.fFile);
  *(undefined **)
   &(this->screenPinkSlipStandings).tScreenTournamentStandings3item.tScreenTournamentStandings.
    fCountedDown = &table;
  __7tScreen((tScreen *)
             &(this->screenTournamentStandings3item).tScreenTournamentStandings.tScreen.fSwapShapes)
  ;
  *(undefined **)&(this->screenTournamentStandings3item).tScreenTournamentStandings.fDrawMoney =
       &table;
  __7tScreen((tScreen *)&(this->screenPinkSlips).fImageTVs[1].shapeType);
  *(undefined4 *)&(this->screenPinkSlips).fImageTVs[3].shapeType = 0x80012310;
  __7tScreen((tScreen *)((this->screenBeTheCopCongrats).tScreenCongrats.fCarInfo.fColorList + 0xd));
  *(undefined **)&(this->screenBeTheCopCongrats).tScreenCongrats.fStartCountdownNOW = &table;
  return this;
}



// decompiled code
// original method signature: 
// void /*$ra*/ _._11tAllScreens(struct tAllScreens *this /*$s2*/, int __in_chrg /*$s1*/)
 // line 226, offset 0x8002bf0c
	/* begin block 1 */
		// Start line: 227
		// Start offset: 0x8002BF0C

		/* begin block 1.1 */
			// Start line: 227
			// Start offset: 0x8002BF0C
		/* end block 1.1 */
		// End offset: 0x8002BF0C
		// End Line: 227
	/* end block 1 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 2 */
		// Start line: 227
		// Start offset: 0x8002BF0C

		/* begin block 2.1 */
			// Start line: 227
			// Start offset: 0x8002BF0C
		/* end block 2.1 */
		// End offset: 0x8002BF0C
		// End Line: 227
	/* end block 2 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 3 */
		// Start line: 227
		// Start offset: 0x8002BF0C
	/* end block 3 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 4 */
		// Start line: 227
		// Start offset: 0x8002BF0C

		/* begin block 4.1 */
			// Start line: 227
			// Start offset: 0x8002BF0C
		/* end block 4.1 */
		// End offset: 0x8002BF0C
		// End Line: 227
	/* end block 4 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 5 */
		// Start line: 227
		// Start offset: 0x8002BF0C

		/* begin block 5.1 */
			// Start line: 227
			// Start offset: 0x8002BF0C

			/* begin block 5.1.1 */
				// Start line: 227
				// Start offset: 0x8002BF0C
			/* end block 5.1.1 */
			// End offset: 0x8002BF0C
			// End Line: 227
		/* end block 5.1 */
		// End offset: 0x8002BF0C
		// End Line: 227
	/* end block 5 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 6 */
		// Start line: 227
		// Start offset: 0x8002BF0C

		/* begin block 6.1 */
			// Start line: 227
			// Start offset: 0x8002BF0C
		/* end block 6.1 */
		// End offset: 0x8002BF0C
		// End Line: 227
	/* end block 6 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 7 */
		// Start line: 227
		// Start offset: 0x8002BF0C
	/* end block 7 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 8 */
		// Start line: 227
		// Start offset: 0x8002BF0C
	/* end block 8 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 9 */
		// Start line: 227
		// Start offset: 0x8002BF0C
	/* end block 9 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 10 */
		// Start line: 227
		// Start offset: 0x8002BF0C
	/* end block 10 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 11 */
		// Start line: 227
		// Start offset: 0x8002BF0C
		// Variables:
	// 		struct tScreenControllerConfig *this; // $s0

		/* begin block 11.1 */
			// Start line: 227
			// Start offset: 0x8002BF0C

			/* begin block 11.1.1 */
				// Start line: 227
				// Start offset: 0x8002BF0C

				/* begin block 11.1.1.1 */
					// Start line: 227
					// Start offset: 0x8002BF0C

					/* begin block 11.1.1.1.1 */
						// Start line: 227
						// Start offset: 0x8002BF0C
					/* end block 11.1.1.1.1 */
					// End offset: 0x8002BF0C
					// End Line: 227
				/* end block 11.1.1.1 */
				// End offset: 0x8002BF0C
				// End Line: 227
			/* end block 11.1.1 */
			// End offset: 0x8002BF0C
			// End Line: 227
		/* end block 11.1 */
		// End offset: 0x8002BF0C
		// End Line: 227
	/* end block 11 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 12 */
		// Start line: 227
		// Start offset: 0x8002BF0C
	/* end block 12 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 13 */
		// Start line: 227
		// Start offset: 0x8002BF0C

		/* begin block 13.1 */
			// Start line: 227
			// Start offset: 0x8002BF0C
		/* end block 13.1 */
		// End offset: 0x8002BF0C
		// End Line: 227
	/* end block 13 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 14 */
		// Start line: 227
		// Start offset: 0x8002BF0C
	/* end block 14 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 15 */
		// Start line: 227
		// Start offset: 0x8002BF0C
	/* end block 15 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 16 */
		// Start line: 227
		// Start offset: 0x8002BF0C
	/* end block 16 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 17 */
		// Start line: 227
		// Start offset: 0x8002BF0C
	/* end block 17 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 18 */
		// Start line: 227
		// Start offset: 0x8002BF0C
		// Variables:
	// 		struct tScreenPinkSlipsCarSelect *this; // $s0

		/* begin block 18.1 */
			// Start line: 227
			// Start offset: 0x8002BF0C
			// Variables:
		// 		struct tScreenCarSelectTwoPlayer *this; // $s0

			/* begin block 18.1.1 */
				// Start line: 227
				// Start offset: 0x8002BF0C

				/* begin block 18.1.1.1 */
					// Start line: 227
					// Start offset: 0x8002BF0C

					/* begin block 18.1.1.1.1 */
						// Start line: 227
						// Start offset: 0x8002BF0C
					/* end block 18.1.1.1.1 */
					// End offset: 0x8002BF0C
					// End Line: 227
				/* end block 18.1.1.1 */
				// End offset: 0x8002BF0C
				// End Line: 227
			/* end block 18.1.1 */
			// End offset: 0x8002BF0C
			// End Line: 227
		/* end block 18.1 */
		// End offset: 0x8002BF0C
		// End Line: 227
	/* end block 18 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 19 */
		// Start line: 227
		// Start offset: 0x8002BF0C
		// Variables:
	// 		struct tScreenPinkSlipsCarSelect *this; // $s0

		/* begin block 19.1 */
			// Start line: 227
			// Start offset: 0x8002BF0C
			// Variables:
		// 		struct tScreenCarSelectTwoPlayer *this; // $s0

			/* begin block 19.1.1 */
				// Start line: 227
				// Start offset: 0x8002BF0C

				/* begin block 19.1.1.1 */
					// Start line: 227
					// Start offset: 0x8002BF0C

					/* begin block 19.1.1.1.1 */
						// Start line: 227
						// Start offset: 0x8002BF0C
					/* end block 19.1.1.1.1 */
					// End offset: 0x8002BF0C
					// End Line: 227
				/* end block 19.1.1.1 */
				// End offset: 0x8002BF0C
				// End Line: 227
			/* end block 19.1.1 */
			// End offset: 0x8002BF0C
			// End Line: 227
		/* end block 19.1 */
		// End offset: 0x8002BF0C
		// End Line: 227
	/* end block 19 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 20 */
		// Start line: 227
		// Start offset: 0x8002BF0C
		// Variables:
	// 		struct tScreenCarSelectTwoPlayer *this; // $s0

		/* begin block 20.1 */
			// Start line: 227
			// Start offset: 0x8002BF0C

			/* begin block 20.1.1 */
				// Start line: 227
				// Start offset: 0x8002BF0C

				/* begin block 20.1.1.1 */
					// Start line: 227
					// Start offset: 0x8002BF0C
				/* end block 20.1.1.1 */
				// End offset: 0x8002BF0C
				// End Line: 227
			/* end block 20.1.1 */
			// End offset: 0x8002BF0C
			// End Line: 227
		/* end block 20.1 */
		// End offset: 0x8002BF0C
		// End Line: 227
	/* end block 20 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 21 */
		// Start line: 227
		// Start offset: 0x8002BF0C
		// Variables:
	// 		struct tScreenCarSelectTwoPlayer *this; // $s0

		/* begin block 21.1 */
			// Start line: 227
			// Start offset: 0x8002BF0C

			/* begin block 21.1.1 */
				// Start line: 227
				// Start offset: 0x8002BF0C

				/* begin block 21.1.1.1 */
					// Start line: 227
					// Start offset: 0x8002BF0C
				/* end block 21.1.1.1 */
				// End offset: 0x8002BF0C
				// End Line: 227
			/* end block 21.1.1 */
			// End offset: 0x8002BF0C
			// End Line: 227
		/* end block 21.1 */
		// End offset: 0x8002BF0C
		// End Line: 227
	/* end block 21 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 22 */
		// Start line: 227
		// Start offset: 0x8002BF0C
	/* end block 22 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 23 */
		// Start line: 227
		// Start offset: 0x8002BF0C
		// Variables:
	// 		struct tScreenMain *this; // $s2
	/* end block 23 */
	// End offset: 0x8002BF0C
	// End Line: 227

	/* begin block 24 */
		// Start line: 3767
	/* end block 24 */
	// End Line: 3768

	/* begin block 25 */
		// Start line: 3806
	/* end block 25 */
	// End Line: 3807

	/* begin block 26 */
		// Start line: 452
	/* end block 26 */
	// End Line: 453

/* WARNING: Type propagation algorithm not settling */

void ___11tAllScreens(tAllScreens *this,int __in_chrg)

{
  ___7tScreen((tScreen *)((this->screenBeTheCopCongrats).tScreenCongrats.fCarInfo.fColorList + 0xd),
              2);
  ___7tScreen((tScreen *)&(this->screenPinkSlips).fImageTVs[1].shapeType,2);
  ___7tScreen((tScreen *)
              &(this->screenTournamentStandings3item).tScreenTournamentStandings.tScreen.fSwapShapes
              ,2);
  ___7tScreen((tScreen *)
              &(this->screenPinkSlipStandings).tScreenTournamentStandings3item.
               tScreenTournamentStandings.tScreen.fSwapShapes.fFile,2);
  ___7tScreen((tScreen *)((this->screenPinkSlipCongrats).tScreenCongrats.fCarInfo.fSpeechColors + 8)
              ,2);
  ___7tScreen((tScreen *)&(this->screenUserName).fTextFade,2);
  ___7tScreen((tScreen *)((this->screenMemcard).fFadeIcon + 9),2);
  ___7tScreen((tScreen *)&(this->screenAudio).tScreen.fPermShapes.fLoadCancelled,2);
  ___7tScreen((tScreen *)&(this->screenDisplay).tScreen.fPermShapes.fNumShapes,2);
  ___7tScreen((tScreen *)
              &(this->screenControllerConfig).negconPopUp.tDialogInteractive.tDialogMessageString.
               tDialogBase.currentlyOn,2);
  ___7tScreen((tScreen *)&(this->screenControllerConfig).fShaker.time,2);
  ___7tScreen((tScreen *)((this->screenTrophyInfo).tScreen.fPermShapes.fFilename + 0xc),2);
  ___7tScreen((tScreen *)((this->screenTrophyRoom).fTrophyList + 0x1c),2);
  ___17tScreenTrophyRoom
            ((tScreenTrophyRoom *)
             ((this->screenTournamentTrophy).tScreenCongrats.fCarInfo.fColorOrder + 1),2);
  ___7tScreen((tScreen *)&(this->screenTournamentStandings).tScreen.fInternalScreenFadeVal,2);
  ___7tScreen((tScreen *)&(this->screenTournSelect).trophyTV[3].tint,2);
  ___18tScreenTournSelect((tScreenTournSelect *)&(this->screenTrackSelect).fVideoWall.fTVShapes,2);
  ___7tScreen((tScreen *)&(this->screenTrackInfo).fVideoWall.fFirstTVShape,2);
  ___7tScreen((tScreen *)((this->screenTrackRecords).tScreen.fSwapShapes.fFilename + 0xc),2);
  ___7tScreen((tScreen *)
              &(this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
               tDialogMessageString.tDialogBase.MaxW,2);
  ___7tScreen((tScreen *)
              (this->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.tScreenCarSelect.
              fDestBrightness,2);
  ___16tScreenCarSelect
            ((tScreenCarSelect *)
             &(this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
              tDialogMessageString.tDialogBase.fDefault,2);
  ___7tScreen((tScreen *)
              ((this->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.tScreenCarSelect.
               fFadeTicks + 1),2);
  ___16tScreenCarSelect
            ((tScreenCarSelect *)
             &(this->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.OffsetX,2)
  ;
  ___7tScreen((tScreen *)&(this->screenCarSelectPlayerTwo).tScreenCarSelect.fInShowroom,2);
  ___16tScreenCarSelect
            ((tScreenCarSelect *)
             &(this->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.fFullyOpen
             ,2);
  ___7tScreen((tScreen *)&(this->screenCarSelectTwoPlayer).tScreenCarSelect.fSpeechTicks,2);
  ___16tScreenCarSelect
            ((tScreenCarSelect *)((this->screenCarSelectDuel).fOpponentShapes.fFilename + 8),2);
  ___16tScreenCarSelect((tScreenCarSelect *)&(this->screenCarSelect).fSplineInterval,2);
  ___16tScreenCarSelect((tScreenCarSelect *)&(this->screenMain).fNumTVsInTransition,2);
  ___7tScreen((tScreen *)this,2);
  if ((__in_chrg & 1U) != 0) {
    __builtin_delete(this);
  }
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_ConstructAll__Fv()
 // line 231, offset 0x80026e58
	/* begin block 1 */
		// Start line: 232
		// Start offset: 0x80026E58
	/* end block 1 */
	// End offset: 0x80026E58
	// End Line: 232

	/* begin block 2 */
		// Start line: 462
	/* end block 2 */
	// End Line: 463

	/* begin block 3 */
		// Start line: 462
	/* end block 3 */
	// End Line: 463

/* WARNING: Type propagation algorithm not settling */
/* WARNING: Unknown calling convention yet parameter storage is locked */

void Front_ConstructAll__Fv(void)

{
  tAllScreens *this;
  tFEApplication *this_00;
  tGlobalMenuDefs *this_01;
  
  this = (tAllScreens *)__builtin_new((uint)&DAT_00003bd8);
  gAllScreens = __11tAllScreens(this);
  screenCarSelect = (tScreenCarSelect *)&(gAllScreens->screenMain).fNumTVsInTransition;
  screenCarSelectDuel = (tScreenCarSelectDuel *)&(gAllScreens->screenCarSelect).fSplineInterval;
  screenCarSelectTwoPlayer =
       (tScreenCarSelectTwoPlayer *)
       ((gAllScreens->screenCarSelectDuel).fOpponentShapes.fFilename + 8);
  screenCarSelectPlayerTwo =
       (tScreenCarSelectTwoPlayer *)
       &(gAllScreens->screenCarSelectTwoPlayer).CarDialog.tDialogMessageString.tDialogBase.
        fFullyOpen;
  screenPinkSlipsCarSelectTwoPlayer =
       (tScreenPinkSlipsCarSelect *)
       &(gAllScreens->screenCarSelectPlayerTwo).CarDialog.tDialogMessageString.tDialogBase.OffsetX;
  screenPinkSlipsCarSelectPlayerTwo =
       (tScreenPinkSlipsCarSelect *)
       &(gAllScreens->screenPinkSlipsCarSelectTwoPlayer).tScreenCarSelectTwoPlayer.CarDialog.
        tDialogMessageString.tDialogBase.fDefault;
  screenTrackRecords =
       (tScreenTrackRecords *)
       &(gAllScreens->screenPinkSlipsCarSelectPlayerTwo).tScreenCarSelectTwoPlayer.CarDialog.
        tDialogMessageString.tDialogBase.MaxW;
  screenTrackInfo =
       (tScreenTrackInfo *)((gAllScreens->screenTrackRecords).tScreen.fSwapShapes.fFilename + 0xc);
  screenTrackSelect = (tScreenTrackSelect *)&(gAllScreens->screenTrackInfo).fVideoWall.fFirstTVShape
  ;
  screenTournSelect = (tScreenTournSelect *)&(gAllScreens->screenTrackSelect).fVideoWall.fTVShapes;
  screenTournamentStandings =
       (tScreenTournamentStandings *)&(gAllScreens->screenTournSelect).trophyTV[3].tint;
  screenTournamentTrophy =
       (tScreenTournamentTrophy *)
       &(gAllScreens->screenTournamentStandings).tScreen.fInternalScreenFadeVal;
  screenTrophyRoom =
       (tScreenTrophyRoom *)
       ((gAllScreens->screenTournamentTrophy).tScreenCongrats.fCarInfo.fColorOrder + 1);
  screenTrophyInfo = (tScreenTrophyInfo *)((gAllScreens->screenTrophyRoom).fTrophyList + 0x1c);
  screenControllerConfig =
       (tScreenControllerConfig *)
       ((gAllScreens->screenTrophyInfo).tScreen.fPermShapes.fFilename + 0xc);
  screenDisplay =
       (tScreenDisplay *)
       &(gAllScreens->screenControllerConfig).negconPopUp.tDialogInteractive.tDialogMessageString.
        tDialogBase.currentlyOn;
  screenAudio = (tScreenAudio *)&(gAllScreens->screenDisplay).tScreen.fPermShapes.fNumShapes;
  screenMemcard = (tScreenMemcard *)&(gAllScreens->screenAudio).tScreen.fPermShapes.fLoadCancelled;
  screenUserName = (tScreenUserName *)((gAllScreens->screenMemcard).fFadeIcon + 9);
  screenPinkSlipCongrats = (tScreenPinkSlipCongrats *)&(gAllScreens->screenUserName).fTextFade;
  screenPinkSlipStandings =
       (tScreenPinkSlipStandings *)
       ((gAllScreens->screenPinkSlipCongrats).tScreenCongrats.fCarInfo.fSpeechColors + 8);
  screenTournamentStandings3item =
       (tScreenTournamentStandings3item *)
       &(gAllScreens->screenPinkSlipStandings).tScreenTournamentStandings3item.
        tScreenTournamentStandings.tScreen.fSwapShapes.fFile;
  screenPinkSlips =
       (tScreenPinkSlips *)
       &(gAllScreens->screenTournamentStandings3item).tScreenTournamentStandings.tScreen.fSwapShapes
  ;
  screenBeTheCopCongrats =
       (tScreenBeTheCopCongrats *)&(gAllScreens->screenPinkSlips).fImageTVs[1].shapeType;
  screenTournamentCongrats =
       (tScreenTournamentCongrats *)
       ((gAllScreens->screenBeTheCopCongrats).tScreenCongrats.fCarInfo.fColorList + 0xd);
  screenMain = (tScreenMain *)gAllScreens;
  this_00 = (tFEApplication *)__builtin_new(0x380);
  FEApp = __14tFEApplication(this_00);
  this_01 = (tGlobalMenuDefs *)__builtin_new((uint)&DAT_00003b18);
  menuDefs = __15tGlobalMenuDefs(this_01);
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_DeleteAll__Fv()
 // line 270, offset 0x80026fe8
	/* begin block 1 */
		// Start line: 271
		// Start offset: 0x80026FE8
	/* end block 1 */
	// End offset: 0x8002703C
	// End Line: 274

	/* begin block 2 */
		// Start line: 572
	/* end block 2 */
	// End Line: 573

	/* begin block 3 */
		// Start line: 576
	/* end block 3 */
	// End Line: 577

	/* begin block 4 */
		// Start line: 576
	/* end block 4 */
	// End Line: 577

	/* begin block 5 */
		// Start line: 577
	/* end block 5 */
	// End Line: 578

	/* begin block 6 */
		// Start line: 577
	/* end block 6 */
	// End Line: 578

/* WARNING: Unknown calling convention yet parameter storage is locked */

void Front_DeleteAll__Fv(void)

{
  if (gAllScreens != (tAllScreens *)0x0) {
    ___11tAllScreens(gAllScreens,3);
  }
  if (FEApp != (tFEApplication *)0x0) {
    ___14tFEApplication(FEApp,3);
  }
  if (menuDefs != (tGlobalMenuDefs *)0x0) {
    ___15tGlobalMenuDefs(menuDefs,3);
  }
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_ResetSettingsForCar__Fii(int player /*$a0*/, int car /*$a1*/)
 // line 280, offset 0x8002704c
	/* begin block 1 */
		// Start line: 281
		// Start offset: 0x8002704C
	/* end block 1 */
	// End offset: 0x8002704C
	// End Line: 282

	/* begin block 2 */
		// Start line: 590
	/* end block 2 */
	// End Line: 591

	/* begin block 3 */
		// Start line: 597
	/* end block 3 */
	// End Line: 598

	/* begin block 4 */
		// Start line: 597
	/* end block 4 */
	// End Line: 598

	/* begin block 5 */
		// Start line: 598
	/* end block 5 */
	// End Line: 599

	/* begin block 6 */
		// Start line: 598
	/* end block 6 */
	// End Line: 599

void Front_ResetSettingsForCar__Fii(int player,int car)

{
  int iVar1;
  
  iVar1 = car + player * 0x30;
  frontEnd.settingsActive[player] = frontEnd.settingsActive[player] & ~(ushort)(1 << (car & 0x1fU));
  frontEnd.carDownforce[iVar1] = '2';
  frontEnd.suspension[iVar1] = '2';
  frontEnd.engineTuning[iVar1] = '\x03';
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_ResetSettingsMenu__Fi(int player /*$s1*/)
 // line 288, offset 0x8002709c
	/* begin block 1 */
		// Start line: 289
		// Start offset: 0x8002709C
		// Variables:
	// 		int i; // $s0
	/* end block 1 */
	// End offset: 0x800270D0
	// End Line: 295

	/* begin block 2 */
		// Start line: 612
	/* end block 2 */
	// End Line: 613

	/* begin block 3 */
		// Start line: 616
	/* end block 3 */
	// End Line: 617

	/* begin block 4 */
		// Start line: 616
	/* end block 4 */
	// End Line: 617

void Front_ResetSettingsMenu__Fi(int player)

{
  int car;
  
  car = 0;
  do {
    Front_ResetSettingsForCar__Fii(player,car);
    car = car + 1;
  } while (car < 0x30);
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_ResetPSXController__Fii(int player /*$s0*/, int config /*$s1*/)
 // line 299, offset 0x800270e4
	/* begin block 1 */
		// Start line: 300
		// Start offset: 0x800270E4
	/* end block 1 */
	// End offset: 0x800270E4
	// End Line: 300

	/* begin block 2 */
		// Start line: 636
	/* end block 2 */
	// End Line: 637

	/* begin block 3 */
		// Start line: 641
	/* end block 3 */
	// End Line: 642

	/* begin block 4 */
		// Start line: 641
	/* end block 4 */
	// End Line: 642

void Front_ResetPSXController__Fii(int player,int config)

{
  timedwait(10);
  PAD_update();
  frontEnd.controlType[player] = (ushort)*(byte *)((int)gPadinfo.buf + player * 0x20 + 1);
  frontEnd.controlConfig[player] = (char)config;
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_ResetPSXAnalogs__Fi(int player /*$a0*/)
 // line 318, offset 0x80027150
	/* begin block 1 */
		// Start line: 319
		// Start offset: 0x80027150
	/* end block 1 */
	// End offset: 0x80027150
	// End Line: 323

	/* begin block 2 */
		// Start line: 671
	/* end block 2 */
	// End Line: 672

	/* begin block 3 */
		// Start line: 680
	/* end block 3 */
	// End Line: 681

	/* begin block 4 */
		// Start line: 680
	/* end block 4 */
	// End Line: 681

	/* begin block 5 */
		// Start line: 684
	/* end block 5 */
	// End Line: 685

void Front_ResetPSXAnalogs__Fi(int player)

{
  frontEnd.steeringRange[player] = 'y';
  frontEnd.deadSpot[player] = '\n';
  frontEnd.ImaxRange[player] = -1;
  frontEnd.IImaxRange[player] = -1;
  frontEnd.J1MAX[player] = '\x7f';
  frontEnd.J1MIN[player] = '\x06';
  frontEnd.J2MAX[player] = '\x7f';
  frontEnd.J2MIN[player] = '\x06';
  return;
}



// decompiled code
// original method signature: 
// int /*$ra*/ GetPSXPadValue__Fii(int value /*$s0*/, int player /*$s1*/)
 // line 333, offset 0x80027194
	/* begin block 1 */
		// Start line: 334
		// Start offset: 0x80027194
		// Variables:
	// 		int newControl; // $v0
	// 		int type; // $v1
	/* end block 1 */
	// End offset: 0x800274F8
	// End Line: 466

	/* begin block 2 */
		// Start line: 711
	/* end block 2 */
	// End Line: 712

	/* begin block 3 */
		// Start line: 714
	/* end block 3 */
	// End Line: 715

	/* begin block 4 */
		// Start line: 714
	/* end block 4 */
	// End Line: 715

int GetPSXPadValue__Fii(int value,int player)

{
  byte bVar1;
  byte bVar2;
  uint uVar3;
  uint uVar4;
  
  PAD_update();
  if (((PAD_COMMON *)((int)gPadinfo.buf + player * 0x20))->nopad == '\0') {
    bVar2 = *(byte *)((int)gPadinfo.buf + player * 0x20 + 1);
  }
  else {
    bVar2 = 0;
  }
  if (bVar2 != 0x53) {
    if (bVar2 < 0x54) {
      if (bVar2 == 0x23) {
        if (value == 0x8000) {
          bVar2 = frontEnd.IImaxRange[player];
          uVar3 = 0x2000000;
        }
        else {
          if (0x8000 < value) {
            if (value != 0x200000) {
              if (value != 0x800000) goto code_r0x800271f8;
              bVar2 = frontEnd.deadSpot[player];
              bVar1 = frontEnd.steeringRange[player];
              goto LAB_8002744c;
            }
            uVar4 = player << 0x1e | ((uint)(byte)frontEnd.deadSpot[player] + 0x80) * 0x10000;
            uVar3 = ((uint)(byte)frontEnd.steeringRange[player] + 0x80) * 0x100;
            goto LAB_800274cc;
          }
          if (value == 0x400) {
            return player << 0x1e | 0x30aff01;
          }
          if (value != 0x4000) goto code_r0x800271f8;
          bVar2 = frontEnd.ImaxRange[player];
          uVar3 = 0x1000000;
        }
        uVar4 = player << 0x1e;
        uVar3 = (uint)bVar2 << 8 | uVar3;
        goto LAB_800274cc;
      }
      goto code_r0x800271f8;
    }
    if (bVar2 != 0x73) goto code_r0x800271f8;
  }
  if (value == 0x400000) {
    uVar3 = ((uint)(byte)frontEnd.J1MIN[player] + 0x80) * 0x10000 | 0x1000000;
    bVar2 = frontEnd.J1MAX[player];
LAB_800273d0:
    return player << 0x1e | uVar3 | ((uint)bVar2 + 0x80) * 0x100 | 1;
  }
  if (value < 0x400001) {
    if (value == 0x100000) {
      uVar3 = (0x7f - (uint)(byte)frontEnd.J1MIN[player]) * 0x10000 | 0x1000000;
      bVar2 = frontEnd.J1MAX[player];
      goto LAB_80027398;
    }
    if (0x100000 < value) {
      if (value == 0x200000) {
        uVar4 = player << 0x1e | ((uint)(byte)frontEnd.J1MIN[player] + 0x80) * 0x10000;
        uVar3 = ((uint)(byte)frontEnd.J1MAX[player] + 0x80) * 0x100;
LAB_800274cc:
        return uVar4 | uVar3 | 1;
      }
code_r0x800271f8:
      return player << 0x1a | value << 8 | 2;
    }
    if (value != -0x80000000) goto code_r0x800271f8;
    bVar2 = frontEnd.J2MIN[player];
    uVar3 = 0x2000000;
  }
  else {
    if (value != 0x10000000) {
      if (value < 0x10000001) {
        if (value == 0x800000) {
          bVar2 = frontEnd.J1MIN[player];
          bVar1 = frontEnd.J2MAX[player];
LAB_8002744c:
          return player << 0x1e | (0x7f - (uint)bVar2) * 0x10000 | (0x7f - (uint)bVar1) * 0x100 | 1;
        }
        goto code_r0x800271f8;
      }
      if (value == 0x20000000) {
        bVar2 = frontEnd.J2MIN[player];
        uVar3 = 0x2000000;
      }
      else {
        if (value != 0x40000000) goto code_r0x800271f8;
        bVar2 = frontEnd.J2MIN[player];
        uVar3 = 0x3000000;
      }
      uVar3 = ((uint)bVar2 + 0x80) * 0x10000 | uVar3;
      bVar2 = frontEnd.J2MAX[player];
      goto LAB_800273d0;
    }
    bVar2 = frontEnd.J2MIN[player];
    uVar3 = 0x3000000;
  }
  uVar3 = (0x7f - (uint)bVar2) * 0x10000 | uVar3;
  bVar2 = frontEnd.J2MAX[player];
LAB_80027398:
  return player << 0x1e | uVar3 | (0x7f - (uint)bVar2) * 0x100 | 1;
}



// decompiled code
// original method signature: 
// void /*$ra*/ SetPads__Fv()
 // line 474, offset 0x8002750c
	/* begin block 1 */
		// Start line: 475
		// Start offset: 0x8002750C
		// Variables:
	// 		int j; // $s5
	// 		int pad; // $s1

		/* begin block 1.1 */
			// Start line: 475
			// Start offset: 0x8002750C

			/* begin block 1.1.1 */
				// Start line: 477
				// Start offset: 0x80027548
				// Variables:
			// 		int LookingFor; // $s6
			// 		int starttick; // $s0

				/* begin block 1.1.1.1 */
					// Start line: 480
					// Start offset: 0x80027568

					/* begin block 1.1.1.1.1 */
						// Start line: 480
						// Start offset: 0x80027568
					/* end block 1.1.1.1.1 */
					// End offset: 0x8002756C
					// End Line: 480
				/* end block 1.1.1.1 */
				// End offset: 0x8002756C
				// End Line: 480

				/* begin block 1.1.1.2 */
					// Start line: 484
					// Start offset: 0x8002756C

					/* begin block 1.1.1.2.1 */
						// Start line: 484
						// Start offset: 0x8002756C

						/* begin block 1.1.1.2.1.1 */
							// Start line: 484
							// Start offset: 0x8002756C
						/* end block 1.1.1.2.1.1 */
						// End offset: 0x8002756C
						// End Line: 484
					/* end block 1.1.1.2.1 */
					// End offset: 0x8002756C
					// End Line: 484
				/* end block 1.1.1.2 */
				// End offset: 0x8002759C
				// End Line: 484

				/* begin block 1.1.1.3 */
					// Start line: 485
					// Start offset: 0x8002759C

					/* begin block 1.1.1.3.1 */
						// Start line: 486
						// Start offset: 0x800275B0
						// Variables:
					// 		int theanalogoffset; // $s4
					// 		void * gotone; // $s3
					// 		int numoffsets; // $s2

						/* begin block 1.1.1.3.1.1 */
							// Start line: 487
							// Start offset: 0x800275B0
							// Variables:
						// 		int i; // $s0

							/* begin block 1.1.1.3.1.1.1 */
								// Start line: 491
								// Start offset: 0x800275CC
							/* end block 1.1.1.3.1.1.1 */
							// End offset: 0x800275F4
							// End Line: 498
						/* end block 1.1.1.3.1.1 */
						// End offset: 0x800275FC
						// End Line: 500
					/* end block 1.1.1.3.1 */
					// End offset: 0x8002760C
					// End Line: 502
				/* end block 1.1.1.3 */
				// End offset: 0x8002760C
				// End Line: 502
			/* end block 1.1.1 */
			// End offset: 0x8002760C
			// End Line: 502
		/* end block 1.1 */
		// End offset: 0x80027618
		// End Line: 504
	/* end block 1 */
	// End offset: 0x80027618
	// End Line: 504

	/* begin block 2 */
		// Start line: 987
	/* end block 2 */
	// End Line: 988

	/* begin block 3 */
		// Start line: 996
	/* end block 3 */
	// End Line: 997

	/* begin block 4 */
		// Start line: 996
	/* end block 4 */
	// End Line: 997

/* WARNING: Unknown calling convention yet parameter storage is locked */

void SetPads__Fv(void)

{
  bool bVar1;
  uchar *puVar2;
  uint uVar3;
  uint uVar4;
  int iVar5;
  int iVar6;
  int iVar7;
  int iVar8;
  uint uVar9;
  tfrontEnd *ptVar10;
  
  iVar8 = 0;
  ptVar10 = &frontEnd;
  while (puVar2 = ticks, uVar9 = 4, iVar8 < 2) {
    iVar6 = iVar8 << 4;
    if (ptVar10->AnalogOn[0] != (void *)0x0) {
      uVar9 = 7;
    }
    do {
      bVar1 = false;
      if ((int)(ticks + -(int)puVar2) < 0x80) {
        uVar3 = PadGetState();
        bVar1 = uVar3 != 6;
      }
    } while (bVar1);
    uVar3 = PadGetState();
    iVar7 = 0;
    if (uVar3 == 6) {
      bVar1 = false;
      uVar3 = PadInfoMode(iVar6,4,-1);
      iVar5 = 0;
      while (iVar5 < (int)uVar3) {
        uVar4 = PadInfoMode(iVar6,4,iVar5);
        if (uVar4 == uVar9) {
          bVar1 = true;
          iVar7 = iVar5;
        }
        iVar5 = iVar5 + 1;
      }
      if (bVar1) {
        PadSetMainMode(iVar6,(char)iVar7,0);
      }
    }
    ptVar10 = (tfrontEnd *)&ptVar10->raceType;
    iVar8 = iVar8 + 1;
  }
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ InitFrontEndStructure__Fv()
 // line 507, offset 0x80027648
	/* begin block 1 */
		// Start line: 508
		// Start offset: 0x80027648
		// Variables:
	// 		int i; // $s3
	// 		int j; // $s0
	/* end block 1 */
	// End offset: 0x8002788C
	// End Line: 635

	/* begin block 2 */
		// Start line: 1064
	/* end block 2 */
	// End Line: 1065

	/* begin block 3 */
		// Start line: 1068
	/* end block 3 */
	// End Line: 1069

	/* begin block 4 */
		// Start line: 1068
	/* end block 4 */
	// End Line: 1069

/* WARNING: Unknown calling convention yet parameter storage is locked */

void InitFrontEndStructure__Fv(void)

{
  tfrontEnd *ptVar1;
  int iVar2;
  tCarInfo *ptVar3;
  int iVar4;
  tfrontEnd *ptVar5;
  int iVar6;
  int player;
  tfrontEnd *ptVar7;
  int local_30;
  
  frontEnd.randomSeed = 0;
  frontEnd.catchup = '\x01';
  frontEnd.currentPlayer = '\0';
  frontEnd.cheatFlags = 0;
  frontEnd.cheatFlagsActive = 0;
  frontEnd.secretFlags = 0;
  frontEnd.gameMode = '\0';
  frontEnd.raceType = '\0';
  frontEnd.skillLevel = '\0';
  frontEnd.headstart = '\x14';
  ptVar1 = &frontEnd;
  player = 0;
  do {
    iVar6 = player + 1;
    ptVar1->track[0] = '\0';
    ptVar1->lapind[0] = '\0';
    ptVar1->trackmirrored[0] = '\0';
    ptVar1->trackdirection[0] = '\0';
    ptVar1->timeOfDay[0] = '\0';
    ptVar1->weather[0] = '\0';
    ptVar1->traffic[0] = '\0';
    ptVar1->situations[0] = '\0';
    ptVar1->checkPointDisplay[0] = '\0';
    ptVar1->playerCar[0] = '\0';
    ptVar1 = (tfrontEnd *)(player + -0x7feeb9ff);
    player = iVar6;
  } while (iVar6 < 5);
  player = 0;
  ptVar1 = &frontEnd;
  iVar6 = 0;
  local_30 = 0;
  frontEnd.localSpeech = '\0';
  frontEnd.opponentUpgrades = '\0';
  frontEnd.dealerCar = '\0';
  frontEnd.sellerCar = '\0';
  frontEnd.damage = '\x01';
  frontEnd.laps = '\0';
  frontEnd.recordlaptime = Stattool_ReturnRecordLapTime__Fs((ushort)(byte)frontEnd.track[0]);
  frontEnd.tractionassist = '\x01';
  frontEnd.bestline = '\x01';
  frontEnd.checkPointType = '\x01';
  frontEnd.tournament = '\0';
  frontEnd.specialevent = '\0';
  frontEnd.tier = '\0';
  frontEnd.upgrade = '\0';
  frontEnd.policeTier = '\0';
  frontEnd.policeMission = '\0';
  frontEnd.measurement = '\0';
  ptVar5 = ptVar1;
  ptVar7 = ptVar1;
  do {
    iVar4 = 0;
    ptVar5->AnalogOn[0] = (void *)0x1;
    ptVar1->ABS[0] = '\0';
    ptVar1->transmission[0] = '\x01';
    ptVar1->displaySpeed[0] = '\0';
    ptVar1->displayTach[0] = '\x01';
    ptVar1->displayMap[0] = '\x01';
    ptVar1->displayOpponentID[0] = '\x01';
    ptVar1->displayTime[0] = '\x01';
    ptVar1->displayPosition[0] = '\x01';
    ptVar1->displayLapNumber[0] = '\x01';
    ptVar1->displayMirror[0] = '\0';
    ptVar1->pinkSlipsWins[0] = '\0';
    ptVar5->pinkSlipsCash[0] = 0;
    frontEnd.pinkSlipsForfeit = -1;
    ptVar5->cameraType[1] = '\x03';
    ptVar5->cameraType[2] = '\x06';
    ptVar5->cameraType[3] = '\a';
    ptVar5->cameraType[0] = '\0';
    frontEnd.playerNameList[player * 8] = '\0';
    iVar2 = iVar6;
    do {
      frontEnd.cameraSway[iVar2] = '\0';
      iVar4 = iVar4 + 1;
      iVar2 = iVar4 + iVar6;
    } while (iVar4 < 4);
    iVar2 = 0;
    ptVar1->rampSteer[0] = '\x01';
    ptVar1->rampGas[0] = '\x01';
    ptVar1->rampBrake[0] = '\x01';
    do {
      ptVar3 = GetCarFromID__11tCarManagers(&carManager,(short)iVar2);
      iVar4 = iVar2 + local_30;
      iVar2 = iVar2 + 1;
      frontEnd.carColors[iVar4] = ptVar3->fDefaultColor;
    } while (iVar2 < 0x30);
    ptVar7->controlType[0] = 0x41;
    ptVar1->controlConfig[0] = '\0';
    ptVar1->defaultedPlayerName[0] = '\x01';
    ptVar1->shockMode[0] = 'U';
    ptVar1->shockImpact[0] = 'U';
    Front_ResetPSXAnalogs__Fi(player);
    Front_ResetPSXController__Fii(player,0);
    ptVar1 = (tfrontEnd *)((int)&ptVar1->randomSeed + 1);
    ptVar7 = (tfrontEnd *)&ptVar7->currentPlayer;
    iVar6 = iVar6 + 4;
    ptVar5 = (tfrontEnd *)&ptVar5->raceType;
    player = player + 1;
    local_30 = local_30 + 0x30;
  } while (player < 2);
  frontEnd.numBTracksActivated = '\0';
  Front_ResetSettingsMenu__Fi(0);
  Front_ResetSettingsMenu__Fi(1);
  frontEnd.oppNumber = '\x01';
  frontEnd.audioMode = '\x02';
  frontEnd.oppCar = '\0';
  frontEnd.language = '\0';
  frontEnd.musicVolume = 'U';
  frontEnd.sfxVolume = 'U';
  frontEnd.narrationVolume = 'U';
  frontEnd.engineVolume = 'U';
  frontEnd.ambientVolume = 'U';
  frontEnd.song = '\0';
  gMasterMusicLevel = 0x55;
  gMasterSFXLevel = 0x55;
  gMasterFENarrationLevel = 0x55;
  gMasterAmbientLevel = 0x55;
  frontEnd.sensitivity = '\0';
  frontEnd.GotAPlayList = (void *)0x0;
  Setup__14tCreditManager(&CreditManager);
  return;
}



// decompiled code
// original method signature: 
// int /*$ra*/ LoadConfig__Fv()
 // line 810, offset 0x80027940
	/* begin block 1 */
		// Start line: 811
		// Start offset: 0x80027940
	/* end block 1 */
	// End offset: 0x80027940
	// End Line: 812

	/* begin block 2 */
		// Start line: 1748
	/* end block 2 */
	// End Line: 1749

	/* begin block 3 */
		// Start line: 1894
	/* end block 3 */
	// End Line: 1895

	/* begin block 4 */
		// Start line: 1894
	/* end block 4 */
	// End Line: 1895

	/* begin block 5 */
		// Start line: 1895
	/* end block 5 */
	// End Line: 1896

	/* begin block 6 */
		// Start line: 1895
	/* end block 6 */
	// End Line: 1896

/* WARNING: Unknown calling convention yet parameter storage is locked */

int LoadConfig__Fv(void)

{
  return 0;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_InitialMemCardCheck__Fv()
 // line 819, offset 0x80027948
	/* begin block 1 */
		// Start line: 820
		// Start offset: 0x80027948
	/* end block 1 */
	// End offset: 0x80027948
	// End Line: 820

	/* begin block 2 */
		// Start line: 1904
	/* end block 2 */
	// End Line: 1905

	/* begin block 3 */
		// Start line: 1912
	/* end block 3 */
	// End Line: 1913

	/* begin block 4 */
		// Start line: 1912
	/* end block 4 */
	// End Line: 1913

/* WARNING: Unknown calling convention yet parameter storage is locked */

void Front_InitialMemCardCheck__Fv(void)

{
  MEMCARDFRONTENDISINITTED = (void *)0x0;
  gPSXMemCardFull = 0;
  memCardReadOK = (void *)0x0;
  Stattool_GetAllDefaultRecords__FP13tRecordBufferb(Stats_gTrackRecords,(void *)0x0);
  InitFrontEndStructure__Fv();
  frontEnd.language = '\0';
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_SecondaryMemCardCheck__Fv()
 // line 852, offset 0x80027994
	/* begin block 1 */
		// Start line: 853
		// Start offset: 0x80027994

		/* begin block 1.1 */
			// Start line: 853
			// Start offset: 0x80027994
			// Variables:
		// 		int j; // $s1

			/* begin block 1.1.1 */
				// Start line: 858
				// Start offset: 0x800279C8
				// Variables:
			// 		int i; // $s0
			/* end block 1.1.1 */
			// End offset: 0x80027A18
			// End Line: 866
		/* end block 1.1 */
		// End offset: 0x80027A24
		// End Line: 867
	/* end block 1 */
	// End offset: 0x80027A24
	// End Line: 870

	/* begin block 2 */
		// Start line: 1980
	/* end block 2 */
	// End Line: 1981

	/* begin block 3 */
		// Start line: 1985
	/* end block 3 */
	// End Line: 1986

	/* begin block 4 */
		// Start line: 1985
	/* end block 4 */
	// End Line: 1986

/* WARNING: Unknown calling convention yet parameter storage is locked */

void Front_SecondaryMemCardCheck__Fv(void)

{
  short sVar1;
  int iVar2;
  int iVar3;
  
  MEMCARDFRONTENDISINITTED = (void *)0x0;
  Init_Memcard__FbT0((void *)0x0,(void *)0x0);
  iVar3 = 0;
  do {
    if (1 < iVar3) {
      DeInit_Memcard__Fv();
      SetPads__Fv();
      MEMCARDFRONTENDISINITTED = &DAT_00000001;
      return;
    }
    iVar2 = 0;
    if (memCardReadOK == (void *)0x0) {
      do {
        sVar1 = LoadGame__FsbT1((short)iVar3,(void *)0x0,(void *)0x0);
        memCardReadOK = (void *)(uint)(sVar1 == 0);
        iVar2 = iVar2 + 1;
        if (2 < iVar2) break;
      } while (sVar1 != 0);
    }
    memCardReadOK = (void *)0x0;
    iVar3 = iVar3 + 1;
  } while( true );
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_InitGraphics__Fv()
 // line 880, offset 0x80027a5c
	/* begin block 1 */
		// Start line: 881
		// Start offset: 0x80027A5C
		// Variables:
	// 		char buffer[40]; // stack offset -48
	/* end block 1 */
	// End offset: 0x80027AB4
	// End Line: 913

	/* begin block 2 */
		// Start line: 2036
	/* end block 2 */
	// End Line: 2037

	/* begin block 3 */
		// Start line: 2044
	/* end block 3 */
	// End Line: 2045

	/* begin block 4 */
		// Start line: 2044
	/* end block 4 */
	// End Line: 2045

/* WARNING: Unknown calling convention yet parameter storage is locked */

void Front_InitGraphics__Fv(void)

{
  uint uVar1;
  char acStack48 [40];
  
  initlinkmode(0,1,1);
  sprintf(acStack48,s__szzFE_viv_800114a4,PTR_801164f4);
  uVar1 = FILE_addbigsync(acStack48,0,100,(uint *)&gFEBigHandle);
  if (uVar1 == 0) {
    do {
                    /* WARNING: Do nothing block with infinite loop */
    } while( true );
  }
  Platform_ResetDCTBuffer__Fv();
  Init_PSX_FrontEnd__Fv();
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_InitGraphicsAndDisplayLoading__Fv()
 // line 919, offset 0x80027ad4
	/* begin block 1 */
		// Start line: 920
		// Start offset: 0x80027AD4
	/* end block 1 */
	// End offset: 0x80027AD4
	// End Line: 920

	/* begin block 2 */
		// Start line: 2138
	/* end block 2 */
	// End Line: 2139

	/* begin block 3 */
		// Start line: 2142
	/* end block 3 */
	// End Line: 2143

	/* begin block 4 */
		// Start line: 2142
	/* end block 4 */
	// End Line: 2143

/* WARNING: Unknown calling convention yet parameter storage is locked */

void Front_InitGraphicsAndDisplayLoading__Fv(void)

{
  Front_InitGraphics__Fv();
  return;
}



// decompiled code
// original method signature: 
// int /*$ra*/ Front_Menu__F21tFront_ProcessingType(enum tFront_ProcessingType role /*$s1*/)
 // line 934, offset 0x80027af4
	/* begin block 1 */
		// Start line: 935
		// Start offset: 0x80027AF4
		// Variables:
	// 		int result; // $s3

		/* begin block 1.1 */
			// Start line: 935
			// Start offset: 0x80027AF4

			/* begin block 1.1.1 */
				// Start line: 935
				// Start offset: 0x80027AF4
			/* end block 1.1.1 */
			// End offset: 0x80027AF4
			// End Line: 935
		/* end block 1.1 */
		// End offset: 0x80027AF4
		// End Line: 935

		/* begin block 1.2 */
			// Start line: 935
			// Start offset: 0x80027AF4

			/* begin block 1.2.1 */
				// Start line: 963
				// Start offset: 0x80027B7C

				/* begin block 1.2.1.1 */
					// Start line: 963
					// Start offset: 0x80027B7C
				/* end block 1.2.1.1 */
				// End offset: 0x80027B7C
				// End Line: 963
			/* end block 1.2.1 */
			// End offset: 0x80027B7C
			// End Line: 963

			/* begin block 1.2.2 */
				// Start line: 964
				// Start offset: 0x80027B90

				/* begin block 1.2.2.1 */
					// Start line: 965
					// Start offset: 0x80027B90
					// Variables:
				// 		long extraMoney; // $v0

					/* begin block 1.2.2.1.1 */
						// Start line: 965
						// Start offset: 0x80027B90
					/* end block 1.2.2.1.1 */
					// End offset: 0x80027BB0
					// End Line: 965
				/* end block 1.2.2.1 */
				// End offset: 0x80027BB0
				// End Line: 965
			/* end block 1.2.2 */
			// End offset: 0x80027BB0
			// End Line: 965
		/* end block 1.2 */
		// End offset: 0x80027BB0
		// End Line: 965

		/* begin block 1.3 */
			// Start line: 968
			// Start offset: 0x80027BB0

			/* begin block 1.3.1 */
				// Start line: 969
				// Start offset: 0x80027BE0
				// Variables:
			// 		struct tMenuCommand tempCommand; // stack offset -40

				/* begin block 1.3.1.1 */
					// Start line: 986
					// Start offset: 0x80027C1C

					/* begin block 1.3.1.1.1 */
						// Start line: 996
						// Start offset: 0x80027C60

						/* begin block 1.3.1.1.1.1 */
							// Start line: 996
							// Start offset: 0x80027C60

							/* begin block 1.3.1.1.1.1.1 */
								// Start line: 998
								// Start offset: 0x80027C8C
								// Variables:
							// 		struct Car_tStats *dummyCars; // $v0

								/* begin block 1.3.1.1.1.1.1.1 */
									// Start line: 998
									// Start offset: 0x80027C8C

									/* begin block 1.3.1.1.1.1.1.1.1 */
										// Start line: 998
										// Start offset: 0x80027C8C
									/* end block 1.3.1.1.1.1.1.1.1 */
									// End offset: 0x80027C8C
									// End Line: 998
								/* end block 1.3.1.1.1.1.1.1 */
								// End offset: 0x80027C8C
								// End Line: 998
							/* end block 1.3.1.1.1.1.1 */
							// End offset: 0x80027D14
							// End Line: 1017
						/* end block 1.3.1.1.1.1 */
						// End offset: 0x80027D14
						// End Line: 1017
					/* end block 1.3.1.1.1 */
					// End offset: 0x80027D14
					// End Line: 1017
				/* end block 1.3.1.1 */
				// End offset: 0x80027D14
				// End Line: 1017
			/* end block 1.3.1 */
			// End offset: 0x80027D28
			// End Line: 1021
		/* end block 1.3 */
		// End offset: 0x80027D28
		// End Line: 1021
	/* end block 1 */
	// End offset: 0x80027D28
	// End Line: 1024

	/* begin block 2 */
		// Start line: 2158
	/* end block 2 */
	// End Line: 2159

	/* begin block 3 */
		// Start line: 2172
	/* end block 3 */
	// End Line: 2173

	/* begin block 4 */
		// Start line: 2172
	/* end block 4 */
	// End Line: 2173

int Front_Menu__F21tFront_ProcessingType(tFront_ProcessingType role)

{
  ushort uVar1;
  long lVar2;
  tAppCommand tVar3;
  tMenuCommand tStack40;
  
  tVar3 = kApp_Command_StartRace;
  fSuppressLoadingText = 1;
  gLargestUnused = largestunused();
  FeAudio_InitCommentary__Fii((uint)(byte)frontEnd.language);
  InitializeSpinningCars__Fv();
  Front_ConstructAll__Fv();
  uVar1 = GetNumOwnedCars__11tCarManagers(&carManager,0);
  if ((int)((uint)uVar1 << 0x10) < 1 && tournamentManager.fMoney < 1) {
    lVar2 = CheapestCarStockPrice__11tCarManager(&carManager);
    tournamentManager.fMoney = tournamentManager.fMoney + lVar2 + 1;
  }
  if (role != kFront_QuitToGameSetup) {
    if (1 < (int)role) {
      if (role == kFront_QuitToPostGame) {
        gCalculateVictory = '\x01';
        if ((frontEnd.raceType == '\x02') && (GameSetup_gData.replayMode == 0)) {
          AdvanceToNextTrack__18tTournamentManager(&tournamentManager);
          UpdateAwardInformation__18tTournamentManager(&tournamentManager);
        }
        else {
          if ((frontEnd.raceType == '\x06') && (GameSetup_gData.replayMode == 0)) {
            if (((Cars_gNewCarStatsList.finalPosition < 2) && (frontEnd.pinkSlipsForfeit != 0)) ||
               (frontEnd.pinkSlipsForfeit == 1)) {
              frontEnd.pinkSlipsWinner[(uint)(byte)frontEnd.pinkSlipsTrackIndex] = 0;
              frontEnd.pinkSlipsWins[0] = frontEnd.pinkSlipsWins[0] + '\x01';
            }
            else {
              frontEnd.pinkSlipsWinner[(uint)(byte)frontEnd.pinkSlipsTrackIndex] = 1;
              frontEnd.pinkSlipsWins[1] = frontEnd.pinkSlipsWins[1] + '\x01';
            }
          }
        }
        tVar3 = RunPostGame__14tFEApplication(FEApp);
      }
      goto LAB_80027d28;
    }
    if (role != kFront_InitialLoad) goto LAB_80027d28;
    LoadConfig__Fv();
  }
  if (gUseFrontend != 0) {
    MenuExtended_TransitionFromPostGameToMainMenu__FR12tMenuCommand(&tStack40);
    tVar3 = RunFrontEnd__14tFEApplication(FEApp);
  }
LAB_80027d28:
  Front_DeleteAll__Fv();
  FeAudio_DeInitCommentary__Fv();
  Audio_FECleanUp__Fv();
  TextSys_UnloadWords__Fv();
  FeTools_deinit__Fv();
  PSXExitFrontend__Fv();
  FILE_delbigsync(gFEBigHandle,100);
  gFEBigHandle = 0;
  frontEnd.recordlaptime = Stattool_ReturnRecordLapTime__Fs((ushort)(byte)frontEnd.track[0]);
  gLargestUnused = largestunused();
  return tVar3;
}



// decompiled code
// original method signature: 
// int * /*$ra*/ OutputDisplaySettings__FPiiiR17tTrackInformation(int *d /*$t0*/, int c /*$t1*/, int player /*$a2*/, struct tTrackInformation *trackInfo /*$a3*/)
 // line 1171, offset 0x80027da8
	/* begin block 1 */
		// Start line: 1172
		// Start offset: 0x80027DA8
		// Variables:
	// 		int valtopass; // $a0
	/* end block 1 */
	// End offset: 0x80027E20
	// End Line: 1191

	/* begin block 2 */
		// Start line: 2338
	/* end block 2 */
	// End Line: 2339

	/* begin block 3 */
		// Start line: 2548
	/* end block 3 */
	// End Line: 2549

	/* begin block 4 */
		// Start line: 2548
	/* end block 4 */
	// End Line: 2549

int * OutputDisplaySettings__FPiiiR17tTrackInformation
                (int *d,int c,int player,tTrackInformation *trackInfo)

{
  byte bVar1;
  int iVar2;
  
  bVar1 = frontEnd.displaySpeed[player];
  iVar2 = 0;
  if (bVar1 != 1) {
    if (bVar1 < 2) {
      iVar2 = 2;
      if (bVar1 == 0) {
        iVar2 = (int)CountryMeasurement[(uint)trackInfo->fSpeedoCountry];
      }
    }
    else {
      iVar2 = 2;
      if (bVar1 == 2) {
        iVar2 = 1;
      }
    }
  }
  *d = 0x11a;
  d[1] = c;
  d[2] = iVar2;
  d[3] = 0x11b;
  d[4] = c;
  d[5] = (uint)(frontEnd.displaySpeed[player] != '\x03');
  d[6] = 0x11c;
  d[7] = c;
  d[8] = (uint)(byte)frontEnd.displayMap[player];
  d[9] = 0x11d;
  d[10] = c;
  d[0xb] = (uint)(byte)frontEnd.displayOpponentID[player];
  d[0xc] = 0x11e;
  d[0xd] = c;
  d[0xe] = (uint)(byte)frontEnd.displayTime[player];
  d[0xf] = 0x11f;
  d[0x10] = c;
  d[0x11] = (uint)(byte)frontEnd.displayLapNumber[player];
  d[0x12] = 0x120;
  d[0x13] = c;
  d[0x14] = (uint)(byte)frontEnd.displayPosition[player];
  d[0x15] = 0x121;
  d[0x16] = c;
  iVar2 = player * 4;
  d[0x17] = (uint)(byte)frontEnd.displayMirror[player];
  d[0x18] = 0x126;
  d[0x19] = c;
  d[0x1a] = (uint)(byte)frontEnd.cameraType[iVar2];
  d[0x1b] = 0x127;
  d[0x1c] = c;
  d[0x1d] = (uint)(byte)frontEnd.cameraType[iVar2 + 1];
  d[0x1e] = 0x128;
  d[0x1f] = c;
  d[0x20] = (uint)(byte)frontEnd.cameraType[iVar2 + 2];
  d[0x21] = 0x129;
  d[0x22] = c;
  d[0x23] = (uint)(byte)frontEnd.cameraType[iVar2 + 3];
  return d + 0x24;
}



// decompiled code
// original method signature: 
// int /*$ra*/ Front_GetLapsForType__Fv()
 // line 1210, offset 0x80027fc0
	/* begin block 1 */
		// Start line: 1211
		// Start offset: 0x80027FC0
		// Variables:
	// 		short lapconv[2]; // stack offset -8

		/* begin block 1.1 */
			// Start line: 1211
			// Start offset: 0x80027FC0

			/* begin block 1.1.1 */
				// Start line: 1215
				// Start offset: 0x80027FEC

				/* begin block 1.1.1.1 */
					// Start line: 1215
					// Start offset: 0x80027FEC

					/* begin block 1.1.1.1.1 */
						// Start line: 1215
						// Start offset: 0x80027FEC
					/* end block 1.1.1.1.1 */
					// End offset: 0x80027FEC
					// End Line: 1215
				/* end block 1.1.1.1 */
				// End offset: 0x80027FEC
				// End Line: 1215
			/* end block 1.1.1 */
			// End offset: 0x80028060
			// End Line: 1224
		/* end block 1.1 */
		// End offset: 0x80028060
		// End Line: 1224
	/* end block 1 */
	// End offset: 0x80028060
	// End Line: 1224

	/* begin block 2 */
		// Start line: 2622
	/* end block 2 */
	// End Line: 2623

	/* begin block 3 */
		// Start line: 2628
	/* end block 3 */
	// End Line: 2629

	/* begin block 4 */
		// Start line: 2628
	/* end block 4 */
	// End Line: 2629

/* WARNING: Unknown calling convention yet parameter storage is locked */

int Front_GetLapsForType__Fv(void)

{
  uint uVar1;
  short local_8 [4];
  
  if (frontEnd.raceType == '\x02') {
    uVar1 = (uint)(tournamentManager.fDefinition)->fTournaments
                  [(uint)(tournamentManager.fDefinition)->fTiers[tournamentManager.fTier].
                         fTournOffset + tournamentManager.fTournament].fNumLaps;
  }
  else {
    uVar1 = SEXT24(local_8[(uint)(byte)frontEnd.lapind[(uint)(byte)frontEnd.pinkSlipsTrackIndex]]);
  }
  return uVar1;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_InitStream__FR9tFEStream(struct tFEStream *streamData /*$a0*/)
 // line 1231, offset 0x80028068
	/* begin block 1 */
		// Start line: 1232
		// Start offset: 0x80028068
	/* end block 1 */
	// End offset: 0x80028068
	// End Line: 1232

	/* begin block 2 */
		// Start line: 2666
	/* end block 2 */
	// End Line: 2667

	/* begin block 3 */
		// Start line: 2674
	/* end block 3 */
	// End Line: 2675

	/* begin block 4 */
		// Start line: 2674
	/* end block 4 */
	// End Line: 2675

void Front_InitStream__FR9tFEStream(tFEStream *streamData)

{
  streamData->totalCars = 0;
  streamData->totalModels = 0;
  streamData->currentCar = 0;
  InitializeIngameCarList__11tCarManager(&carManager);
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_InitPlayerCars__FR9tFEStream(struct tFEStream *streamData /*$s1*/)
 // line 1241, offset 0x80028098
	/* begin block 1 */
		// Start line: 1242
		// Start offset: 0x80028098
		// Variables:
	// 		short i; // $s2
	// 		struct tCarInfo *carInfo; // $a1

		/* begin block 1.1 */
			// Start line: 1299
			// Start offset: 0x80028354

			/* begin block 1.1.1 */
				// Start line: 1299
				// Start offset: 0x8002835C
				// Variables:
			// 		enum tCarModels carModel; // stack offset -32
			// 		char carColor; // stack offset -28
			/* end block 1.1.1 */
			// End offset: 0x800283CC
			// End Line: 1317
		/* end block 1.1 */
		// End offset: 0x80028440
		// End Line: 1325
	/* end block 1 */
	// End offset: 0x80028440
	// End Line: 1325

	/* begin block 2 */
		// Start line: 2688
	/* end block 2 */
	// End Line: 2689

	/* begin block 3 */
		// Start line: 2694
	/* end block 3 */
	// End Line: 2695

	/* begin block 4 */
		// Start line: 2694
	/* end block 4 */
	// End Line: 2695

void Front_InitPlayerCars__FR9tFEStream(tFEStream *streamData)

{
  uchar uVar1;
  short playerNum;
  char *pcVar2;
  undefined *puVar3;
  int iVar4;
  short *psVar5;
  tCarInfo *ptVar6;
  tCarModels local_20;
  uchar local_1c [4];
  
  streamData->numPlayers = 0;
  if (frontEnd.raceType == '\x02') {
    GetGarageCar__11tCarManagersR8tCarInfos
              (&carManager,(ushort)(byte)frontEnd.garageCar[0],streamData->playerCars,0);
  }
  else {
    iVar4 = 0;
    if (frontEnd.raceType != '\x06') {
      do {
        playerNum = (short)iVar4;
        if (frontEnd.carListType == '\0') {
          GetStockCar__11tCarManagersR8tCarInfo
                    (&carManager,(ushort)(byte)frontEnd.playerCar[(int)playerNum],
                     streamData->playerCars + (int)streamData->numPlayers);
          ptVar6 = streamData->playerCars + (int)streamData->numPlayers;
          pcVar2 = &ptVar6->fCarID +
                   (uint)(byte)frontEnd.carColors[(int)ptVar6->fCarID + (int)playerNum * 0x30];
        }
        else {
          GetGarageCar__11tCarManagersR8tCarInfos
                    (&carManager,(ushort)(byte)frontEnd.garageCar[(int)playerNum],
                     streamData->playerCars + (int)streamData->numPlayers,playerNum);
          ptVar6 = streamData->playerCars + (int)streamData->numPlayers;
          pcVar2 = &ptVar6->fCarID + (uint)ptVar6->fColor;
        }
        ptVar6->fColor = pcVar2[0xaf];
        if (ptVar6->fCarClass == '\a') {
          uVar1 = frontEnd.carCountry[(int)ptVar6->fCarID + (int)streamData->numPlayers * 0x30];
          ptVar6->fColor = '\0';
          ptVar6->fCountry = uVar1;
        }
        streamData->numPlayers = streamData->numPlayers + 1;
        iVar4 = iVar4 + 1;
      } while ((frontEnd.gameMode == '\x01') && (iVar4 * 0x10000 >> 0x10 < 2));
      goto LAB_80028354;
    }
    GetPinkSlipsCar__11tCarManagersR8tCarInfos
              (&carManager,(ushort)(byte)frontEnd.pinkSlipsCar[0],streamData->playerCars,0);
    ptVar6 = streamData->playerCars + (int)streamData->numPlayers;
    ptVar6->fColor = ptVar6->fColorOrder[(uint)ptVar6->fColor];
    playerNum = streamData->numPlayers + 1;
    streamData->numPlayers = playerNum;
    GetPinkSlipsCar__11tCarManagersR8tCarInfos
              (&carManager,(ushort)(byte)frontEnd.pinkSlipsCar[1],
               streamData->playerCars + (int)playerNum,1);
  }
  ptVar6 = streamData->playerCars + (int)streamData->numPlayers;
  ptVar6->fColor = ptVar6->fColorOrder[(uint)ptVar6->fColor];
  streamData->numPlayers = streamData->numPlayers + 1;
LAB_80028354:
  playerNum = 0;
  while ((int)playerNum < (int)streamData->numPlayers) {
    local_20 = SEXT14(*(char *)(&streamData->totalCars + (int)playerNum * 0x66 + 4));
    local_1c[0] = *(uchar *)((int)(&streamData->totalCars + (int)playerNum * 0x66) + 0xcd);
    puVar3 = (undefined *)
             IsCarAnAddedModel__11tCarManagerR10tCarModelsRc(&carManager,&local_20,(char *)local_1c)
    ;
    if ((puVar3 != &DAT_00000001) && (streamData->totalModels < 0xd)) {
      streamData->totalModels = streamData->totalModels + 6;
    }
    AddCarToIngameList__11tCarManagerR10tCarModelsRc(&carManager,&local_20,(char *)local_1c);
    iVar4 = (int)playerNum;
    psVar5 = &streamData->totalCars + iVar4 * 10;
    streamData->totalCars = streamData->totalCars + 2;
    *(undefined4 *)(psVar5 + 0xd2) = 1;
    *(tCarModels *)(psVar5 + 0xd8) = local_20;
    *(uchar *)(psVar5 + 0xda) = local_1c[0];
    playerNum = playerNum + 1;
    *(uchar *)((int)psVar5 + 0x1b5) = streamData->playerCars[iVar4].fUpgrades;
  }
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_InitTourneyTraffic__FR9tFEStream(struct tFEStream *streamData /*$s0*/)
 // line 1329, offset 0x8002845c
	/* begin block 1 */
		// Start line: 1330
		// Start offset: 0x8002845C
		// Variables:
	// 		enum tCarModels carModel; // stack offset -40
	// 		char carColor; // stack offset -36
	// 		short i; // $s1

		/* begin block 1.1 */
			// Start line: 1330
			// Start offset: 0x8002845C

			/* begin block 1.1.1 */
				// Start line: 1330
				// Start offset: 0x8002845C
			/* end block 1.1.1 */
			// End offset: 0x8002845C
			// End Line: 1330
		/* end block 1.1 */
		// End offset: 0x8002845C
		// End Line: 1330
	/* end block 1 */
	// End offset: 0x800285AC
	// End Line: 1359

	/* begin block 2 */
		// Start line: 2904
	/* end block 2 */
	// End Line: 2905

	/* begin block 3 */
		// Start line: 2909
	/* end block 3 */
	// End Line: 2910

	/* begin block 4 */
		// Start line: 2909
	/* end block 4 */
	// End Line: 2910

/* WARNING: Could not reconcile some variable overlaps */

void Front_InitTourneyTraffic__FR9tFEStream(tFEStream *streamData)

{
  byte bVar1;
  tTournamentDefinition *ptVar2;
  short sVar3;
  undefined *puVar4;
  int iVar5;
  int iVar6;
  tCarModels local_28;
  char local_24 [4];
  
  ptVar2 = tournamentManager.fDefinition;
  iVar6 = tournamentManager.fTournament;
  local_24[0] = '\0';
  bVar1 = (tournamentManager.fDefinition)->fTiers[tournamentManager.fTier].fTournOffset;
  streamData->numTraffic = 0;
  if ((frontEnd.raceType == '\x02') && (ptVar2->fTournaments[(uint)bVar1 + iVar6].fTraffic != '\0'))
  {
    iVar6 = 0;
    do {
      iVar5 = iVar6 + 1;
      local_28 = (tCarModels)(byte)(streamData->trackInfo).fTrafficCars[(int)(short)iVar6];
      if (5 < iVar5 * 0x10000 >> 0x10) {
        iVar5 = 0;
      }
      puVar4 = (undefined *)
               IsCarAnAddedModel__11tCarManagerR10tCarModelsRc(&carManager,&local_28,local_24);
      if (puVar4 != &DAT_00000001) {
        streamData->totalModels = streamData->totalModels + 1;
        AddCarToIngameList__11tCarManagerR10tCarModelsRc(&carManager,&local_28,local_24);
      }
      streamData->trafficCars[(int)streamData->numTraffic] = (short)local_28;
      sVar3 = streamData->numTraffic + 1;
      streamData->numTraffic = sVar3;
      streamData->totalCars = streamData->totalCars + 1;
      iVar6 = iVar5;
    } while (sVar3 < 3);
  }
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_InitOpponentCars__FR9tFEStream(struct tFEStream *streamData /*$s2*/)
 // line 1366, offset 0x800285d0
	/* begin block 1 */
		// Start line: 1367
		// Start offset: 0x800285D0
		// Variables:
	// 		short i; // $s1
	// 		struct tCarLineup *carLineup; // $s0
	// 		short numOpponents; // $s7

		/* begin block 1.1 */
			// Start line: 1367
			// Start offset: 0x800285D0

			/* begin block 1.1.1 */
				// Start line: 1377
				// Start offset: 0x80028634
				// Variables:
			// 		struct tCarInfo *carInfo; // $s0
			// 		enum tCarModels carModel; // stack offset -64
			// 		char carColor; // stack offset -60
			// 		enum tCarClassType opponentClass; // $v1
			// 		void * usePlayerUpgrades; // stack offset -48
			// 		struct tTourneyInfo *tourn; // $s3

				/* begin block 1.1.1.1 */
					// Start line: 1382
					// Start offset: 0x80028634

					/* begin block 1.1.1.1.1 */
						// Start line: 1389
						// Start offset: 0x8002863C

						/* begin block 1.1.1.1.1.1 */
							// Start line: 1389
							// Start offset: 0x8002863C

							/* begin block 1.1.1.1.1.1.1 */
								// Start line: 1389
								// Start offset: 0x8002863C
							/* end block 1.1.1.1.1.1.1 */
							// End offset: 0x8002863C
							// End Line: 1389
						/* end block 1.1.1.1.1.1 */
						// End offset: 0x8002863C
						// End Line: 1389
					/* end block 1.1.1.1.1 */
					// End offset: 0x8002863C
					// End Line: 1389
				/* end block 1.1.1.1 */
				// End offset: 0x80028694
				// End Line: 1390

				/* begin block 1.1.1.2 */
					// Start line: 1392
					// Start offset: 0x80028694

					/* begin block 1.1.1.2.1 */
						// Start line: 1393
						// Start offset: 0x800286A0

						/* begin block 1.1.1.2.1.1 */
							// Start line: 1393
							// Start offset: 0x800286A0

							/* begin block 1.1.1.2.1.1.1 */
								// Start line: 1393
								// Start offset: 0x800286A0
							/* end block 1.1.1.2.1.1.1 */
							// End offset: 0x800286A0
							// End Line: 1393
						/* end block 1.1.1.2.1.1 */
						// End offset: 0x800286A0
						// End Line: 1393
					/* end block 1.1.1.2.1 */
					// End offset: 0x800286A0
					// End Line: 1393

					/* begin block 1.1.1.2.2 */
						// Start line: 1398
						// Start offset: 0x800286DC

						/* begin block 1.1.1.2.2.1 */
							// Start line: 1398
							// Start offset: 0x800286DC

							/* begin block 1.1.1.2.2.1.1 */
								// Start line: 1398
								// Start offset: 0x800286DC
							/* end block 1.1.1.2.2.1.1 */
							// End offset: 0x80028724
							// End Line: 1398
						/* end block 1.1.1.2.2.1 */
						// End offset: 0x80028724
						// End Line: 1398
					/* end block 1.1.1.2.2 */
					// End offset: 0x80028724
					// End Line: 1398
				/* end block 1.1.1.2 */
				// End offset: 0x80028724
				// End Line: 1398

				/* begin block 1.1.1.3 */
					// Start line: 1401
					// Start offset: 0x80028724

					/* begin block 1.1.1.3.1 */
						// Start line: 1402
						// Start offset: 0x80028738

						/* begin block 1.1.1.3.1.1 */
							// Start line: 1402
							// Start offset: 0x80028738

							/* begin block 1.1.1.3.1.1.1 */
								// Start line: 1402
								// Start offset: 0x80028738
							/* end block 1.1.1.3.1.1.1 */
							// End offset: 0x80028738
							// End Line: 1402
						/* end block 1.1.1.3.1.1 */
						// End offset: 0x80028738
						// End Line: 1402
					/* end block 1.1.1.3.1 */
					// End offset: 0x80028738
					// End Line: 1402
				/* end block 1.1.1.3 */
				// End offset: 0x80028748
				// End Line: 1403

				/* begin block 1.1.1.4 */
					// Start line: 1454
					// Start offset: 0x80028908

					/* begin block 1.1.1.4.1 */
						// Start line: 1455
						// Start offset: 0x8002891C

						/* begin block 1.1.1.4.1.1 */
							// Start line: 1455
							// Start offset: 0x8002891C

							/* begin block 1.1.1.4.1.1.1 */
								// Start line: 1455
								// Start offset: 0x8002891C
							/* end block 1.1.1.4.1.1.1 */
							// End offset: 0x8002891C
							// End Line: 1455
						/* end block 1.1.1.4.1.1 */
						// End offset: 0x8002891C
						// End Line: 1455

						/* begin block 1.1.1.4.1.2 */
							// Start line: 1455
							// Start offset: 0x8002891C

							/* begin block 1.1.1.4.1.2.1 */
								// Start line: 1455
								// Start offset: 0x8002891C
							/* end block 1.1.1.4.1.2.1 */
							// End offset: 0x8002891C
							// End Line: 1455
						/* end block 1.1.1.4.1.2 */
						// End offset: 0x8002891C
						// End Line: 1455
					/* end block 1.1.1.4.1 */
					// End offset: 0x8002899C
					// End Line: 1463
				/* end block 1.1.1.4 */
				// End offset: 0x800289E4
				// End Line: 1473
			/* end block 1.1.1 */
			// End offset: 0x800289E4
			// End Line: 1473

			/* begin block 1.1.2 */
				// Start line: 1476
				// Start offset: 0x800289F0

				/* begin block 1.1.2.1 */
					// Start line: 1476
					// Start offset: 0x800289F0

					/* begin block 1.1.2.1.1 */
						// Start line: 1479
						// Start offset: 0x80028A1C
						// Variables:
					// 		struct tCarInfo carInfo; // stack offset -288
					// 		enum tCarModels carModel; // stack offset -56
					// 		char carColor; // stack offset -52
					// 		enum tCarModels modelList[3]; // stack offset -80
					/* end block 1.1.2.1.1 */
					// End offset: 0x80028ABC
					// End Line: 1511
				/* end block 1.1.2.1 */
				// End offset: 0x80028B34
				// End Line: 1530
			/* end block 1.1.2 */
			// End offset: 0x80028B34
			// End Line: 1530
		/* end block 1.1 */
		// End offset: 0x80028B34
		// End Line: 1530
	/* end block 1 */
	// End offset: 0x80028B34
	// End Line: 1530

	/* begin block 2 */
		// Start line: 2979
	/* end block 2 */
	// End Line: 2980

	/* begin block 3 */
		// Start line: 2987
	/* end block 3 */
	// End Line: 2988

	/* begin block 4 */
		// Start line: 2987
	/* end block 4 */
	// End Line: 2988

void Front_InitOpponentCars__FR9tFEStream(tFEStream *streamData)

{
  char cVar1;
  short sVar2;
  tCarInfo *ptVar3;
  undefined *puVar4;
  void *pvVar5;
  int iVar6;
  uchar uVar7;
  int iVar8;
  short *psVar9;
  int iVar10;
  tTourneyInfo *ptVar11;
  tCarInfo local_120;
  tCarModels atStack80 [4];
  tCarModels local_40;
  byte local_3c [4];
  tCarModels local_38;
  char local_34 [4];
  uint local_30;
  
  streamData->numOpponents = 0;
  if ((frontEnd.raceType == '\x02') ||
     ((frontEnd.raceType == '\0' && (frontEnd.oppNumber == '\x02')))) {
    if (frontEnd.raceType == '\x02') {
      uVar7 = (tournamentManager.fDefinition)->fTournaments
              [(uint)(tournamentManager.fDefinition)->fTiers[tournamentManager.fTier].fTournOffset +
               tournamentManager.fTournament].fOpponentCarClass;
    }
    else {
      uVar7 = '\n';
    }
    if (uVar7 != '\n') {
      iVar8 = (uint)(tournamentManager.fDefinition)->fTiers[tournamentManager.fTier].fTournOffset +
              tournamentManager.fTournament;
    }
    else {
      iVar8 = (uint)(tournamentManager.fDefinition)->fTiers[2].fTournOffset +
              (uint)(byte)streamData->playerCars[0].fCarID;
    }
    local_30 = (uint)(uVar7 == '\n');
    ptVar11 = (tournamentManager.fDefinition)->fTournaments + iVar8;
    iVar8 = 5;
    if (frontEnd.raceType == '\x02') {
      iVar8 = tournamentManager.fNumRacers + -1;
    }
    iVar10 = 0;
    if (0 < iVar8 << 0x10) {
      do {
        sVar2 = (short)iVar10;
        local_40 = (tCarModels)ptVar11->fOpponentCar[(int)sVar2];
        ptVar3 = GetCarFromID__11tCarManagers(&carManager,(ushort)ptVar11->fOpponentCar[(int)sVar2])
        ;
        local_3c[0] = ptVar3->fDefaultColor;
        puVar4 = (undefined *)
                 IsCarAnAddedModel__11tCarManagerR10tCarModelsRc
                           (&carManager,&local_40,(char *)local_3c);
        if ((puVar4 != &DAT_00000001) && (streamData->totalModels < 0x10)) {
          streamData->totalModels = streamData->totalModels + 3;
        }
        FindSimilarCar__11tCarManagerR10tCarModelsRcsP10tCarModels
                  (&carManager,&local_40,(char *)local_3c);
        AddCarToIngameList__11tCarManagerR10tCarModelsRc(&carManager,&local_40,(char *)local_3c);
        psVar9 = &streamData->totalCars + ((int)sVar2 + 1) * 10;
        *(undefined4 *)(psVar9 + 0xd2) = 0;
        *(tCarModels *)(psVar9 + 0xd8) = local_40;
        *(char *)(psVar9 + 0xda) = ptVar3->fColorOrder[(uint)local_3c[0]];
        if (local_30 == 0) {
          *(uchar *)((int)psVar9 + 0x1b5) = ptVar11->fOpponentUpgrades[(int)sVar2];
        }
        else {
          *(uchar *)((int)psVar9 + 0x1b5) = streamData->playerCars[0].fUpgrades;
        }
        if ((frontEnd.raceType == '\x02') && (frontEnd.tier == '\0')) {
          pvVar5 = FECheat_IsCheatEnabled__F10tCheatCode(cheat_FinishedTournament);
          if ((pvVar5 == (void *)0x0) || (frontEnd.opponentUpgrades == '\0')) {
            streamData->carLineup[(int)sVar2 + 1].carUpgrades = '\0';
          }
          else {
            streamData->carLineup[(int)sVar2 + 1].carUpgrades =
                 ptVar11->fOpponentUpgrades[(int)sVar2];
          }
        }
        iVar10 = iVar10 + 1;
        streamData->totalCars = streamData->totalCars + 2;
        streamData->numOpponents = streamData->numOpponents + 1;
      } while (iVar10 * 0x10000 < iVar8 << 0x10);
    }
    iVar10 = 0;
    if (frontEnd.raceType == '\x02') {
      UpdateCarLineup__18tTournamentManager(&tournamentManager);
      iVar10 = 0;
      streamData->numOpponents = (short)tournamentManager.fNumRacers + -1;
      iVar8 = (int)(short)iVar8 + 1;
      if (0 < iVar8) {
        do {
          iVar6 = (int)(short)iVar10;
          *(tPersonalities *)(&streamData->totalCars + iVar6 * 10 + 0xd4) =
               tournamentManager.fCarLineup[iVar6].personality;
          iVar10 = iVar10 + 1;
          *(char *)(&streamData->totalCars + iVar6 * 10 + 0xd6) =
               tournamentManager.fCarLineup[iVar6].position;
        } while (iVar10 * 0x10000 >> 0x10 < iVar8);
      }
    }
    else {
      do {
        sVar2 = (short)iVar10;
        iVar10 = iVar10 + 1;
        *(int *)(&streamData->totalCars + ((int)sVar2 + 1) * 10 + 0xd4) = (int)sVar2;
        *(char *)(&streamData->totalCars + ((int)sVar2 + 1) * 10 + 0xd6) = (char)iVar10;
      } while ((short)iVar10 < 5);
      streamData->carLineup[0].position = '\x06';
    }
  }
  else {
    if (((byte)frontEnd.raceType < 2) && (frontEnd.oppNumber == '\x01')) {
      GetStockCar__11tCarManagersR8tCarInfo(&carManager,(ushort)(byte)frontEnd.oppCar,&local_120);
      local_38 = SEXT14(local_120.fCarID);
      local_34[0] = local_120.fColorOrder[(uint)local_120.fDefaultColor];
      puVar4 = (undefined *)
               IsCarAnAddedModel__11tCarManagerR10tCarModelsRc(&carManager,&local_38,local_34);
      if (puVar4 != &DAT_00000001) {
        if (streamData->totalModels < 0x10) {
          streamData->totalModels = streamData->totalModels + 3;
        }
        else {
          GetClassList__11tCarManager13tCarClassTypesP10tCarModels
                    (&carManager,(uint)local_120.fCarClass,3,atStack80);
          FindSimilarCar__11tCarManagerR10tCarModelsRcsP10tCarModels(&carManager,&local_38,local_34)
          ;
        }
      }
      sVar2 = streamData->numOpponents;
      uVar7 = streamData->playerCars[0].fUpgrades;
      streamData->carLineup[1].isPlayerCar = (void *)0x0;
      streamData->carLineup[1].personality = kPersonalityNemesis;
      streamData->numOpponents = sVar2 + 1;
      cVar1 = *(char *)&streamData->numOpponents;
      streamData->carLineup[1].position = '\x01';
      streamData->carLineup[1].carUpgrades = uVar7;
      streamData->carLineup[1].carModel = local_38;
      streamData->carLineup[1].carColor = local_34[0];
      streamData->carLineup[0].position = cVar1 + '\x01';
      AddCarToIngameList__11tCarManagerR10tCarModelsRc(&carManager,&local_38,local_34);
      streamData->totalCars = streamData->totalCars + 2;
    }
    else {
      streamData->carLineup[0].position = '\x01';
      streamData->carLineup[1].position = '\x02';
    }
  }
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_InitMissions__FR9tFEStream(struct tFEStream *streamData /*$s4*/)
 // line 1536, offset 0x80028b64
	/* begin block 1 */
		// Start line: 1537
		// Start offset: 0x80028B64
		// Variables:
	// 		short i; // $a0
	// 		enum tCarModels fBestCar; // $a2

		/* begin block 1.1 */
			// Start line: 1537
			// Start offset: 0x80028B64

			/* begin block 1.1.1 */
				// Start line: 1553
				// Start offset: 0x80028BA0
				// Variables:
			// 		char oldTier; // $s2
			// 		char oldMission; // $s3
			/* end block 1.1.1 */
			// End offset: 0x80028C74
			// End Line: 1578
		/* end block 1.1 */
		// End offset: 0x80028C74
		// End Line: 1578
	/* end block 1 */
	// End offset: 0x80028C74
	// End Line: 1578

	/* begin block 2 */
		// Start line: 3402
	/* end block 2 */
	// End Line: 3403

	/* begin block 3 */
		// Start line: 3409
	/* end block 3 */
	// End Line: 3410

	/* begin block 4 */
		// Start line: 3409
	/* end block 4 */
	// End Line: 3410

void Front_InitMissions__FR9tFEStream(tFEStream *streamData)

{
  char cVar1;
  char cVar2;
  char cVar3;
  int iVar4;
  int iVar5;
  char cVar6;
  
  streamData->pMission = (tMissionInfo *)0x0;
  streamData->pStages = (tStageInfo *)0x0;
  cVar3 = frontEnd.policeMission;
  cVar2 = frontEnd.policeTier;
  cVar6 = '\0';
  if (frontEnd.raceType == '\x01') {
    iVar5 = 0;
    if (0 < (int)streamData->numPlayers) {
      iVar4 = 0;
      cVar6 = '\0';
      do {
        if (*(char *)(&streamData->totalCars + (iVar4 >> 0x10) * 0x66 + 5) != '\a') {
          return;
        }
        cVar1 = *(char *)(&streamData->totalCars + (iVar4 >> 0x10) * 0x66 + 4);
        iVar5 = iVar5 + 1;
        if (cVar6 < cVar1) {
          cVar6 = cVar1;
        }
        iVar4 = iVar5 * 0x10000;
      } while (iVar5 * 0x10000 >> 0x10 < (int)streamData->numPlayers);
    }
    frontEnd.policeTier = cVar6 + -0x16;
    frontEnd.policeMission = '\0';
    LoadDescription__15tMissionManagerb(&missionManager,&DAT_00000001);
    GetMissionToRace__15tMissionManagerPP12tMissionInfo(&missionManager,&streamData->pMission);
    GetMissionStages__15tMissionManagerssPP10tStageInfo
              (&missionManager,(ushort)(byte)frontEnd.policeTier,
               (ushort)(byte)frontEnd.policeMission,&streamData->pStages);
  }
  frontEnd.policeTier = cVar2;
  frontEnd.policeMission = cVar3;
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_InitCopCars__FR9tFEStream(struct tFEStream *streamData /*$s2*/)
 // line 1606, offset 0x80028c94
	/* begin block 1 */
		// Start line: 1607
		// Start offset: 0x80028C94
		// Variables:
	// 		enum tCarModels fBestModel; // $a1
	// 		enum tCarClassType fBestClass; // $a2
	// 		enum tCarModels copModel; // stack offset -48
	// 		char copColor; // stack offset -44
	// 		short i; // $s3
	/* end block 1 */
	// End offset: 0x80029028
	// End Line: 1695

	/* begin block 2 */
		// Start line: 3542
	/* end block 2 */
	// End Line: 3543

	/* begin block 3 */
		// Start line: 3569
	/* end block 3 */
	// End Line: 3570

	/* begin block 4 */
		// Start line: 3569
	/* end block 4 */
	// End Line: 3570

void Front_InitCopCars__FR9tFEStream(tFEStream *streamData)

{
  ushort uVar1;
  tCarModels *ptVar2;
  undefined *puVar3;
  short sVar4;
  int iVar5;
  tCarModels tVar6;
  uint uVar7;
  tCarModels tVar8;
  uint uVar9;
  int iVar10;
  tCarModels local_30;
  char local_2c [4];
  
  tVar8 = cm_MercedesSLK;
  iVar10 = 0;
  uVar9 = 0;
  local_2c[0] = '\0';
  streamData->numCops = 0;
  streamData->numSuperCops = 0;
  if (0 < (int)streamData->numPlayers) {
    iVar5 = 0;
    do {
      tVar6 = SEXT14(*(char *)(&streamData->totalCars + (iVar5 >> 0x10) * 0x66 + 4));
      if ((int)tVar8 < (int)tVar6) {
        tVar8 = tVar6;
      }
      uVar7 = (uint)*(byte *)(&streamData->totalCars + (iVar5 >> 0x10) * 0x66 + 5);
      iVar10 = iVar10 + 1;
      if (uVar9 < uVar7) {
        uVar9 = uVar7;
      }
      iVar5 = iVar10 * 0x10000;
    } while (iVar10 * 0x10000 >> 0x10 < (int)streamData->numPlayers);
  }
  if ((streamData->pMission == (tMissionInfo *)0x0) || (streamData->pStages == (tStageInfo *)0x0)) {
    if (frontEnd.raceType == '\x01') {
      iVar10 = 0;
      if (0 < (int)streamData->numPlayers) {
        iVar5 = 0;
        do {
          iVar10 = iVar10 + 1;
          if (streamData->playerCars[iVar5 >> 0x10].fCarClass == '\a') {
            return;
          }
          iVar5 = iVar10 * 0x10000;
        } while (iVar10 * 0x10000 >> 0x10 < (int)streamData->numPlayers);
      }
      if ((streamData->numPlayers == 1) && (streamData->numOpponents == 0)) {
        streamData->numCops = 2;
        streamData->numSuperCops = 1;
      }
      else {
        if (streamData->numPlayers == 2) {
          streamData->numCops = 0;
          streamData->numSuperCops = 2;
        }
        else {
          streamData->numCops = 4;
          streamData->numSuperCops = 0;
        }
      }
      uVar1 = streamData->numSuperCops;
      iVar10 = 0;
      if (0 < (int)streamData->numCops + (int)streamData->numSuperCops) {
        iVar5 = 0;
        do {
          if (iVar5 < (int)((uint)uVar1 << 0x10)) {
            ptVar2 = superCopModels + uVar9 * 5 + (uint)(byte)(streamData->trackInfo).fCountry;
          }
          else {
            ptVar2 = regularCopModels + uVar9 * 5 + (uint)(byte)(streamData->trackInfo).fCountry;
          }
          local_30 = *ptVar2;
          puVar3 = (undefined *)
                   IsCarAnAddedModel__11tCarManagerR10tCarModelsRc(&carManager,&local_30,local_2c);
          if (puVar3 != &DAT_00000001) {
            streamData->totalModels = streamData->totalModels + 3;
            AddCarToIngameList__11tCarManagerR10tCarModelsRc(&carManager,&local_30,local_2c);
          }
          sVar4 = (short)iVar10;
          streamData->copCars[(int)sVar4] = local_30;
          iVar10 = iVar10 + 1;
          streamData->totalCars = streamData->totalCars + 2;
          streamData->copCountry[(int)sVar4] = (ushort)(byte)(streamData->trackInfo).fCountry;
          uVar1 = streamData->numSuperCops;
          iVar5 = iVar10 * 0x10000;
        } while (iVar10 * 0x10000 >> 0x10 < (int)streamData->numCops + (int)streamData->numSuperCops
                );
      }
    }
  }
  else {
    if ((frontEnd.gameMode != '\x01') && (iVar10 = 0, streamData->pMission->fNumStages != '\0')) {
      iVar5 = 0;
      do {
        if ((-1 < streamData->pStages[iVar5 >> 0x10].fWingman) ||
           (iVar10 = iVar10 + 1, -1 < streamData->pStages[iVar5 >> 0x10].fBlockadeCop)) {
          streamData->copCars[(int)streamData->numCops] = tVar8;
          streamData->copCountry[(int)streamData->numCops] =
               (ushort)streamData->playerCars[0].fCountry;
          streamData->numCops = streamData->numCops + 1;
          streamData->totalCars = streamData->totalCars + 2;
          return;
        }
        iVar5 = iVar10 * 0x10000;
      } while (iVar10 * 0x10000 >> 0x10 < (int)(uint)streamData->pMission->fNumStages);
    }
  }
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_InitPerps__FR9tFEStream(struct tFEStream *streamData /*$s0*/)
 // line 1702, offset 0x80029054
	/* begin block 1 */
		// Start line: 1703
		// Start offset: 0x80029054
		// Variables:
	// 		short i; // $s1
	// 		short j; // $v1
	// 		struct tCarInfo *carInfo; // $a1

		/* begin block 1.1 */
			// Start line: 1703
			// Start offset: 0x80029054

			/* begin block 1.1.1 */
				// Start line: 1713
				// Start offset: 0x80029088

				/* begin block 1.1.1.1 */
					// Start line: 1714
					// Start offset: 0x80029088

					/* begin block 1.1.1.1.1 */
						// Start line: 1714
						// Start offset: 0x8002909C
						// Variables:
					// 		enum tCarModels carModel; // stack offset -40
					// 		char carColor; // stack offset -36
					/* end block 1.1.1.1.1 */
					// End offset: 0x800291E4
					// End Line: 1747
				/* end block 1.1.1.1 */
				// End offset: 0x800291F8
				// End Line: 1748
			/* end block 1.1.1 */
			// End offset: 0x800291F8
			// End Line: 1748
		/* end block 1.1 */
		// End offset: 0x800291F8
		// End Line: 1748
	/* end block 1 */
	// End offset: 0x800291F8
	// End Line: 1748

	/* begin block 2 */
		// Start line: 3788
	/* end block 2 */
	// End Line: 3789

	/* begin block 3 */
		// Start line: 3794
	/* end block 3 */
	// End Line: 3795

	/* begin block 4 */
		// Start line: 3794
	/* end block 4 */
	// End Line: 3795

void Front_InitPerps__FR9tFEStream(tFEStream *streamData)

{
  byte bVar1;
  tCarInfo *ptVar2;
  undefined *puVar3;
  int iVar4;
  int iVar5;
  uint uVar6;
  short sVar7;
  tCarModels local_28;
  byte local_24 [4];
  
  streamData->numPerpObjects = 0;
  streamData->numPerps = 0;
  if (streamData->pMission != (tMissionInfo *)0x0) {
    sVar7 = 0;
    while (iVar4 = (int)sVar7, iVar4 < (int)(uint)streamData->pMission->fNumStages) {
      bVar1 = streamData->pStages[iVar4].fCarModel;
      local_28 = (tCarModels)bVar1;
      local_24[0] = streamData->pStages[iVar4].fColor;
      ptVar2 = GetCarFromID__11tCarManagers(&carManager,(ushort)bVar1);
      iVar5 = 0;
      uVar6 = (uint)local_24[0];
      iVar4 = 0;
      do {
        local_24[0] = (byte)iVar5;
        iVar5 = iVar5 + 1;
        if ((int)ptVar2->fColorOrder[iVar4 >> 0x10] == uVar6) break;
        local_24[0] = (byte)iVar5;
        iVar4 = iVar5 * 0x10000;
      } while (iVar5 * 0x10000 >> 0x10 < 0x10);
      puVar3 = (undefined *)
               IsCarAnAddedModel__11tCarManagerR10tCarModelsRc
                         (&carManager,&local_28,(char *)local_24);
      if (puVar3 != &DAT_00000001) {
        if (streamData->totalModels < 0x10) {
          streamData->totalModels = streamData->totalModels + 6;
        }
        AddCarToIngameList__11tCarManagerR10tCarModelsRc(&carManager,&local_28,(char *)local_24);
        streamData->totalCars = streamData->totalCars + 2;
        streamData->perps[(int)streamData->numPerpObjects].carModel = local_28;
        streamData->perps[(int)streamData->numPerpObjects].carColor =
             streamData->pStages[(int)sVar7].fColor;
        streamData->numPerpObjects = streamData->numPerpObjects + 1;
      }
      sVar7 = sVar7 + 1;
      streamData->numPerps = streamData->numPerps + 1;
    }
  }
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_InitTrack__FR9tFEStream(struct tFEStream *streamData /*$s1*/)
 // line 1754, offset 0x8002921c
	/* begin block 1 */
		// Start line: 1755
		// Start offset: 0x8002921C
		// Variables:
	// 		struct tTrackInfo *tournTrack; // $v1
	/* end block 1 */
	// End offset: 0x800293CC
	// End Line: 1802

	/* begin block 2 */
		// Start line: 3902
	/* end block 2 */
	// End Line: 3903

	/* begin block 3 */
		// Start line: 3909
	/* end block 3 */
	// End Line: 3910

	/* begin block 4 */
		// Start line: 3909
	/* end block 4 */
	// End Line: 3910

void Front_InitTrack__FR9tFEStream(tFEStream *streamData)

{
  tTrackInformation *ptVar1;
  int iVar2;
  
  if (frontEnd.raceType == '\x02') {
    GetTrackToRace__18tTournamentManagerR10tTrackInfo(&tournamentManager,&streamData->track);
    ptVar1 = GetTrackByID__13tTrackManagers(&trackManager,(short)(streamData->track).fTrackNumber);
    blockmove((undefined4 *)ptVar1,(undefined4 *)&streamData->trackInfo,0x30);
  }
  else {
    GetTrack__13tTrackManagersR17tTrackInformation
              (&trackManager,(ushort)(byte)frontEnd.track[(uint)(byte)frontEnd.pinkSlipsTrackIndex],
               &streamData->trackInfo);
    (streamData->track).fTrackNumber = (streamData->trackInfo).fTrackID;
    if ((frontEnd.carListType == '\x01') || (frontEnd.raceType == '\x01')) {
      (streamData->track).fDirection =
           frontEnd.trackdirection[(uint)(byte)frontEnd.pinkSlipsTrackIndex];
      (streamData->track).fMirrored =
           frontEnd.trackmirrored[(uint)(byte)frontEnd.pinkSlipsTrackIndex];
      (streamData->track).fTimeOfDay = frontEnd.timeOfDay[(uint)(byte)frontEnd.pinkSlipsTrackIndex];
      (streamData->track).fWeather = frontEnd.weather[(uint)(byte)frontEnd.pinkSlipsTrackIndex];
    }
    else {
      (streamData->track).fWeather = '\0';
      (streamData->track).fTimeOfDay = '\0';
      (streamData->track).fMirrored = '\0';
      (streamData->track).fDirection = '\0';
    }
    (streamData->track).fDifficulty = 0x10000;
  }
  if (1 < (streamData->track).fDirection) {
    iVar2 = rand();
    (streamData->track).fDirection = (byte)iVar2 & 1;
  }
  if (1 < (streamData->track).fMirrored) {
    iVar2 = rand();
    (streamData->track).fMirrored = (byte)iVar2 & 1;
  }
  if (1 < (streamData->track).fTimeOfDay) {
    iVar2 = rand();
    (streamData->track).fTimeOfDay = (byte)iVar2 & 1;
  }
  if (1 < (streamData->track).fWeather) {
    iVar2 = rand();
    (streamData->track).fWeather = (byte)iVar2 & 1;
  }
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_InitTraffic__FR9tFEStream(struct tFEStream *streamData /*$s3*/)
 // line 1809, offset 0x800293e0
	/* begin block 1 */
		// Start line: 1810
		// Start offset: 0x800293E0
		// Variables:
	// 		enum tCarModels carModel; // stack offset -40
	// 		char carColor; // stack offset -36
	// 		short i; // $s0
	// 		void * bTraffic; // $a0
	// 		short maxTraffic; // $a2
	/* end block 1 */
	// End offset: 0x800295F4
	// End Line: 1880

	/* begin block 2 */
		// Start line: 4021
	/* end block 2 */
	// End Line: 4022

	/* begin block 3 */
		// Start line: 4029
	/* end block 3 */
	// End Line: 4030

	/* begin block 4 */
		// Start line: 4029
	/* end block 4 */
	// End Line: 4030

/* WARNING: Could not reconcile some variable overlaps */

void Front_InitTraffic__FR9tFEStream(tFEStream *streamData)

{
  bool bVar1;
  short sVar2;
  int iVar3;
  undefined *puVar4;
  int iVar5;
  short sVar6;
  tCarModels local_28;
  char local_24 [4];
  
  local_24[0] = '\0';
  sVar6 = 6;
  if (frontEnd.gameMode == '\x01') {
    sVar6 = 3;
  }
  if ((frontEnd.raceType == '\x01') && (sVar6 = 2, (streamData->track).fTimeOfDay == '\x01')) {
    sVar6 = 1;
  }
  bVar1 = frontEnd.traffic[(uint)(byte)frontEnd.pinkSlipsTrackIndex] != '\0';
  if ((byte)frontEnd.raceType < 2) {
    if ((frontEnd.carListType == '\0') && (frontEnd.raceType == '\0')) {
      bVar1 = true;
    }
    else {
      if (frontEnd.raceType == '\x01') {
        bVar1 = frontEnd.traffic[0] != '\0';
      }
    }
    if (2 < (streamData->trackInfo).fTrackDifficulty) {
      bVar1 = false;
    }
    if ((streamData->trackInfo).fIsEgg != '\0') {
      bVar1 = false;
    }
    if (frontEnd.gameMode == '\x01') {
      if (frontEnd.raceType == '\x01') {
        bVar1 = false;
      }
    }
    else {
      if (frontEnd.oppNumber == '\x02') {
        bVar1 = false;
      }
    }
  }
  else {
    if (frontEnd.raceType != '\x06') {
      bVar1 = false;
    }
  }
  if ((bVar1) && (streamData->numTraffic = 0, sVar6 != 0)) {
    iVar3 = 0;
    do {
      iVar5 = iVar3 + 1;
      local_28 = (tCarModels)(byte)(streamData->trackInfo).fTrafficCars[(int)(short)iVar3];
      iVar3 = iVar5;
      if (5 < iVar5 * 0x10000 >> 0x10) {
        iVar3 = 0;
      }
      puVar4 = (undefined *)
               IsCarAnAddedModel__11tCarManagerR10tCarModelsRc(&carManager,&local_28,local_24);
      if (puVar4 != &DAT_00000001) {
        AddCarToIngameList__11tCarManagerR10tCarModelsRc(&carManager,&local_28,local_24);
      }
      streamData->trafficCars[(int)streamData->numTraffic] = (short)local_28;
      sVar2 = streamData->numTraffic + 1;
      streamData->numTraffic = sVar2;
    } while (sVar2 < sVar6);
  }
  return;
}



// decompiled code
// original method signature: 
// int * /*$ra*/ Front_AppendPlayerCarData__FPiR9tFEStream(int *stream /*$a3*/, struct tFEStream *streamData /*$s0*/)
 // line 1889, offset 0x80029618
	/* begin block 1 */
		// Start line: 1890
		// Start offset: 0x80029618
		// Variables:
	// 		short i; // $s1
	// 		struct tCarInfo *carInfo; // $a1
	// 		struct tCarLineup *carLineup; // $a2
	/* end block 1 */
	// End offset: 0x80029AA0
	// End Line: 1960

	/* begin block 2 */
		// Start line: 4199
	/* end block 2 */
	// End Line: 4200

	/* begin block 3 */
		// Start line: 4209
	/* end block 3 */
	// End Line: 4210

	/* begin block 4 */
		// Start line: 4209
	/* end block 4 */
	// End Line: 4210

int * Front_AppendPlayerCarData__FPiR9tFEStream(int *stream,tFEStream *streamData)

{
  uint uVar1;
  short sVar2;
  int player;
  tCarInfo *ptVar3;
  tCarLineup *ptVar4;
  int iVar5;
  
  iVar5 = 0;
  if (0 < streamData->numPlayers) {
    do {
      *stream = 0x119;
      sVar2 = (short)iVar5;
      player = (int)sVar2;
      stream[1] = (int)streamData->currentCar;
      ptVar4 = streamData->carLineup + player;
      stream[2] = (int)ptVar4->position;
      stream[3] = 0x104;
      stream[4] = (int)streamData->currentCar;
      ptVar3 = streamData->playerCars + player;
      stream[5] = (uint)ptVar3->fSimNumber;
      stream[6] = 0x106;
      stream[7] = (int)streamData->currentCar;
      stream[8] = (uint)(byte)frontEnd.transmission[player];
      stream[9] = 0x10a;
      stream[10] = (int)streamData->currentCar;
      stream[0xb] = (uint)ptVar3->fColor;
      stream[0xc] = 0x10b;
      stream[0xd] = (int)streamData->currentCar;
      stream[0xe] = 0;
      stream[0xf] = 0x111;
      stream[0x10] = (int)streamData->currentCar;
      if (((frontEnd.ABS[player] == '\0') || (ptVar3->fABSAvailable == '\0')) &&
         (ptVar3->fCarID != '\x1c')) {
        stream[0x11] = 0;
      }
      else {
        stream[0x11] = 1;
      }
      stream[0x12] = 0x115;
      stream[0x13] = (int)streamData->currentCar;
      if (((frontEnd.ABS[(int)sVar2] == '\0') || (ptVar3->fTractionAvailable == '\0')) &&
         (ptVar3->fCarID != '\x1c')) {
        stream[0x14] = 0;
      }
      else {
        stream[0x14] = 1;
      }
      stream[0x15] = 0x110;
      stream[0x16] = (int)streamData->currentCar;
      stream[0x17] = (uint)((byte)ptVar4->carUpgrades >> 2) & 1;
      stream[0x18] = 0x112;
      stream[0x19] = (int)streamData->currentCar;
      stream[0x1a] = (uint)((byte)ptVar4->carUpgrades >> 1) & 1;
      stream[0x1b] = 0x10d;
      stream[0x1c] = (int)streamData->currentCar;
      stream[0x1d] = (uint)(byte)ptVar4->carUpgrades & 1;
      stream[0x1e] = 0x10c;
      stream[0x1f] = (int)streamData->currentCar;
      stream[0x20] = 0;
      stream[0x21] = 0x122;
      stream[0x22] = (int)streamData->currentCar;
      uVar1 = *(uint *)(&ptVar3->fCarID + (uint)ptVar3->fColor * 4 + 0x44);
      stream[0x23] = (uint)(byte)(&ptVar3->fCarID + (uint)ptVar3->fColor * 4)[0x46] | uVar1 & 0xff00
                     | (uVar1 & 0xff) << 0x10;
      stream[0x24] = 0x123;
      stream[0x25] = (int)streamData->currentCar;
      stream[0x26] = ptVar3->fHudColor[(uint)(streamData->track).fTimeOfDay];
      stream[0x27] = 0x124;
      stream[0x28] = (int)streamData->currentCar;
      stream[0x29] = (uint)ptVar3->fSpeechColors[(uint)ptVar3->fColor];
      stream[0x2a] = 0x125;
      stream[0x2b] = (int)streamData->currentCar;
      stream[0x2c] = (uint)ptVar3->fCountry;
      if (ptVar3->fCarClass == '\a') {
        stream[0x2d] = 0x105;
        stream[0x2e] = (int)streamData->currentCar;
        player = 0x41;
      }
      else {
        stream[0x2d] = 0x105;
        stream[0x2e] = (int)streamData->currentCar;
        player = 1;
      }
      stream[0x2f] = player;
      stream[0x30] = 0x113;
      stream[0x31] = (int)streamData->currentCar;
      if ((ptVar3->fUpgrades & 2) == 0) {
        uVar1 = (uint)ptVar3->fDefaultTires;
      }
      else {
        uVar1 = 2;
      }
      stream[0x32] = uVar1;
      stream[0x33] = 0x107;
      player = (int)sVar2;
      stream[0x34] = (int)streamData->currentCar;
      stream[0x35] = (uint)(byte)frontEnd.rampSteer[player];
      stream[0x36] = 0x108;
      stream[0x37] = (int)streamData->currentCar;
      stream[0x38] = (uint)(byte)frontEnd.rampGas[player];
      stream[0x39] = 0x109;
      stream[0x3a] = (int)streamData->currentCar;
      stream[0x3b] = (uint)(byte)frontEnd.rampBrake[player];
      stream = OutputDisplaySettings__FPiiiR17tTrackInformation
                         (stream + 0x3c,(int)streamData->currentCar,player,&streamData->trackInfo);
      iVar5 = iVar5 + 1;
      streamData->currentCar = streamData->currentCar + 1;
    } while (iVar5 * 0x10000 >> 0x10 < (int)streamData->numPlayers);
  }
  *stream = 0x1d;
  stream[1] = (int)streamData->numPlayers;
  stream[2] = 0x1e;
  stream[3] = (int)streamData->numOpponents;
  stream[4] = 0xe;
  stream[5] = 0;
  return stream + 6;
}



// decompiled code
// original method signature: 
// int * /*$ra*/ Front_AppendOpponentData__FPiR9tFEStream(int *stream /*$s1*/, struct tFEStream *streamData /*$s2*/)
 // line 1968, offset 0x80029afc
	/* begin block 1 */
		// Start line: 1969
		// Start offset: 0x80029AFC
		// Variables:
	// 		short i; // $s3
	// 		struct tCarInfo *carInfo; // $v0
	// 		struct tCarLineup *carLineup; // $s0
	/* end block 1 */
	// End offset: 0x80029E10
	// End Line: 1999

	/* begin block 2 */
		// Start line: 4379
	/* end block 2 */
	// End Line: 4380

	/* begin block 3 */
		// Start line: 4384
	/* end block 3 */
	// End Line: 4385

	/* begin block 4 */
		// Start line: 4384
	/* end block 4 */
	// End Line: 4385

int * Front_AppendOpponentData__FPiR9tFEStream(int *stream,tFEStream *streamData)

{
  tCarInfo *ptVar1;
  uint uVar2;
  tCarLineup *ptVar3;
  int iVar4;
  
  iVar4 = 0;
  if (0 < streamData->numOpponents) {
    do {
      ptVar3 = streamData->carLineup + (int)(short)iVar4 + (int)streamData->numPlayers;
      ptVar1 = GetCarFromID__11tCarManagers(&carManager,*(short *)&ptVar3->carModel);
      *stream = 0x119;
      stream[1] = (int)streamData->currentCar;
      stream[2] = (int)ptVar3->position;
      stream[3] = 0x104;
      stream[4] = (int)streamData->currentCar;
      stream[5] = (uint)ptVar1->fSimNumber;
      stream[6] = 0x106;
      stream[7] = (int)streamData->currentCar;
      stream[8] = 1;
      stream[9] = 0x105;
      stream[10] = (int)streamData->currentCar;
      stream[0xb] = 2;
      stream[0xc] = 0x114;
      stream[0xd] = (int)streamData->currentCar;
      stream[0xe] = ptVar3->personality;
      stream[0xf] = 0x118;
      stream[0x10] = (int)streamData->currentCar;
      stream[0x11] = ptVar3->personality;
      stream[0x12] = 0x10a;
      stream[0x13] = (int)streamData->currentCar;
      stream[0x14] = (uint)(byte)ptVar3->carColor;
      stream[0x15] = 0x10b;
      stream[0x16] = (int)streamData->currentCar;
      stream[0x17] = 0;
      stream[0x18] = 0x110;
      stream[0x19] = (int)streamData->currentCar;
      stream[0x1a] = (uint)(byte)ptVar3->carUpgrades & 1;
      stream[0x1b] = 0x112;
      stream[0x1c] = (int)streamData->currentCar;
      stream[0x1d] = (uint)((byte)ptVar3->carUpgrades >> 1) & 1;
      stream[0x1e] = 0x10d;
      stream[0x1f] = (int)streamData->currentCar;
      stream[0x20] = (uint)((byte)ptVar3->carUpgrades >> 2) & 1;
      stream[0x21] = 0x10c;
      stream[0x22] = (int)streamData->currentCar;
      stream[0x23] = 0;
      stream[0x24] = 0x125;
      stream[0x25] = (int)streamData->currentCar;
      stream[0x26] = 0;
      stream[0x27] = 0x122;
      stream[0x28] = (int)streamData->currentCar;
      uVar2 = *(uint *)(&ptVar1->fCarID + (uint)(byte)ptVar3->carColor * 4 + 0x44);
      stream[0x29] = (uint)(byte)(&ptVar1->fCarID + (uint)(byte)ptVar3->carColor * 4)[0x46] |
                     uVar2 & 0xff00 | (uVar2 & 0xff) << 0x10;
      stream[0x2a] = 0x123;
      stream[0x2b] = (int)streamData->currentCar;
      stream[0x2c] = ptVar1->fHudColor[(uint)(streamData->track).fTimeOfDay];
      stream[0x2d] = 0x124;
      stream[0x2e] = (int)streamData->currentCar;
      iVar4 = iVar4 + 1;
      stream[0x2f] = (uint)ptVar1->fSpeechColors[(uint)(byte)ptVar3->carColor];
      streamData->currentCar = streamData->currentCar + 1;
      stream = stream + 0x30;
    } while (iVar4 * 0x10000 >> 0x10 < (int)streamData->numOpponents);
  }
  return stream;
}



// decompiled code
// original method signature: 
// int * /*$ra*/ Front_AppendCopData__FPiR9tFEStream(int *stream /*$s0*/, struct tFEStream *streamData /*$s1*/)
 // line 2003, offset 0x80029e30
	/* begin block 1 */
		// Start line: 2004
		// Start offset: 0x80029E30
		// Variables:
	// 		short i; // $s3

		/* begin block 1.1 */
			// Start line: 2017
			// Start offset: 0x80029E7C

			/* begin block 1.1.1 */
				// Start line: 2017
				// Start offset: 0x80029E80
			/* end block 1.1.1 */
			// End offset: 0x80029F34
			// End Line: 2023
		/* end block 1.1 */
		// End offset: 0x8002A064
		// End Line: 2034
	/* end block 1 */
	// End offset: 0x8002A064
	// End Line: 2036

	/* begin block 2 */
		// Start line: 4460
	/* end block 2 */
	// End Line: 4461

	/* begin block 3 */
		// Start line: 4465
	/* end block 3 */
	// End Line: 4466

	/* begin block 4 */
		// Start line: 4465
	/* end block 4 */
	// End Line: 4466

int * Front_AppendCopData__FPiR9tFEStream(int *stream,tFEStream *streamData)

{
  tCarInfo *ptVar1;
  int iVar2;
  int iVar3;
  short sVar4;
  
  if (0 < (int)streamData->numCops + (int)streamData->numSuperCops) {
    *stream = 0xc;
    stream[1] = 1;
    stream = stream + 2;
  }
  sVar4 = 0;
  while (iVar3 = (int)sVar4, iVar3 < (int)streamData->numCops + (int)streamData->numSuperCops) {
    ptVar1 = GetCarFromID__11tCarManagers(&carManager,*(short *)(streamData->copCars + iVar3));
    *stream = 0x104;
    iVar2 = 8;
    stream[1] = (int)streamData->currentCar;
    stream[2] = (uint)ptVar1->fSimNumber;
    stream[3] = 0x106;
    stream[4] = (int)streamData->currentCar;
    stream[5] = 1;
    stream[6] = 0x105;
    stream[7] = (int)streamData->currentCar;
    if (iVar3 < (int)streamData->numSuperCops) {
      iVar2 = 0x10;
    }
    stream[8] = iVar2;
    stream[9] = 0x118;
    sVar4 = sVar4 + 1;
    stream[10] = (int)streamData->currentCar;
    stream[0xb] = (uint)(byte)frontEnd.skillLevel + 5;
    stream[0xc] = 0x10a;
    stream[0xd] = (int)streamData->currentCar;
    stream[0xe] = 0;
    stream[0xf] = 0x10b;
    stream[0x10] = (int)streamData->currentCar;
    stream[0x11] = 0;
    stream[0x12] = 0x10c;
    stream[0x13] = (int)streamData->currentCar;
    stream[0x14] = 0;
    stream[0x15] = 0x125;
    stream[0x16] = (int)streamData->currentCar;
    stream[0x17] = (int)streamData->copCountry[iVar3];
    stream[0x18] = 0x110;
    stream[0x19] = (int)streamData->currentCar;
    stream[0x1a] = 0;
    stream[0x1b] = 0x112;
    stream[0x1c] = (int)streamData->currentCar;
    stream[0x1d] = 0;
    stream[0x1e] = 0x10d;
    stream[0x1f] = (int)streamData->currentCar;
    stream[0x20] = 0;
    stream = stream + 0x21;
    streamData->currentCar = streamData->currentCar + 1;
  }
  return stream;
}



// decompiled code
// original method signature: 
// int * /*$ra*/ Front_AppendPerpData__FPiR9tFEStream(int *stream /*$s1*/, struct tFEStream *streamData /*$s2*/)
 // line 2040, offset 0x8002a084
	/* begin block 1 */
		// Start line: 2041
		// Start offset: 0x8002A084
		// Variables:
	// 		short i; // $s3
	/* end block 1 */
	// End offset: 0x8002A2E4
	// End Line: 2075

	/* begin block 2 */
		// Start line: 4549
	/* end block 2 */
	// End Line: 4550

	/* begin block 3 */
		// Start line: 4554
	/* end block 3 */
	// End Line: 4555

	/* begin block 4 */
		// Start line: 4554
	/* end block 4 */
	// End Line: 4555

int * Front_AppendPerpData__FPiR9tFEStream(int *stream,tFEStream *streamData)

{
  tCarInfo *ptVar1;
  int iVar2;
  int iVar3;
  
  if (streamData->pMission == (tMissionInfo *)0x0) {
    *stream = 0x25;
    stream[1] = 0;
    stream[2] = 0x26;
    stream[3] = 0;
  }
  else {
    *stream = 0x25;
    stream[1] = (uint)streamData->pMission->fNumStages;
    stream[2] = 0x26;
    stream[3] = (uint)streamData->pMission->fStageOffset;
  }
  stream = stream + 4;
  iVar3 = 0;
  if (0 < streamData->numPerpObjects) {
    do {
      iVar2 = (int)&streamData->totalCars + ((iVar3 << 0x10) >> 0xd);
      ptVar1 = GetCarFromID__11tCarManagers(&carManager,*(short *)(iVar2 + 0x260));
      *stream = 0x104;
      iVar3 = iVar3 + 1;
      stream[1] = (int)streamData->currentCar;
      stream[2] = (uint)ptVar1->fSimNumber;
      stream[3] = 0x106;
      stream[4] = (int)streamData->currentCar;
      stream[5] = 1;
      stream[6] = 0x10a;
      stream[7] = (int)streamData->currentCar;
      stream[8] = (uint)*(byte *)(iVar2 + 0x264);
      stream[9] = 0x10b;
      stream[10] = (int)streamData->currentCar;
      stream[0xb] = 0;
      stream[0xc] = 0x105;
      stream[0xd] = (int)streamData->currentCar;
      stream[0xe] = 2;
      stream[0xf] = 0x118;
      stream[0x10] = (int)streamData->currentCar;
      stream[0x11] = 0;
      stream[0x12] = 0x10c;
      stream[0x13] = (int)streamData->currentCar;
      stream[0x14] = 1;
      stream[0x15] = 0x125;
      stream[0x16] = (int)streamData->currentCar;
      stream[0x17] = 0;
      stream[0x18] = 0x110;
      stream[0x19] = (int)streamData->currentCar;
      stream[0x1a] = 0;
      stream[0x1b] = 0x112;
      stream[0x1c] = (int)streamData->currentCar;
      stream[0x1d] = 0;
      stream[0x1e] = 0x10d;
      stream[0x1f] = (int)streamData->currentCar;
      stream[0x20] = 0;
      streamData->currentCar = streamData->currentCar + 1;
      stream = stream + 0x21;
    } while (iVar3 * 0x10000 >> 0x10 < (int)streamData->numPerpObjects);
  }
  *stream = 0x25;
  stream[1] = (int)streamData->numPerps;
  return stream + 2;
}



// decompiled code
// original method signature: 
// int * /*$ra*/ Front_AppendTrafficData__FPiR9tFEStream(int *stream /*$s0*/, struct tFEStream *streamData /*$s1*/)
 // line 2081, offset 0x8002a31c
	/* begin block 1 */
		// Start line: 2082
		// Start offset: 0x8002A31C
		// Variables:
	// 		short i; // $s2
	// 		int density; // $a0
	/* end block 1 */
	// End offset: 0x8002A53C
	// End Line: 2108

	/* begin block 2 */
		// Start line: 4662
	/* end block 2 */
	// End Line: 4663

	/* begin block 3 */
		// Start line: 4667
	/* end block 3 */
	// End Line: 4668

	/* begin block 4 */
		// Start line: 4667
	/* end block 4 */
	// End Line: 4668

int * Front_AppendTrafficData__FPiR9tFEStream(int *stream,tFEStream *streamData)

{
  tCarInfo *ptVar1;
  int iVar2;
  int iVar3;
  
  iVar3 = 0;
  if (0 < streamData->numTraffic) {
    do {
      ptVar1 = GetCarFromID__11tCarManagers
                         (&carManager,
                          *(short *)((int)streamData->trafficCars + ((iVar3 << 0x10) >> 0xf)));
      *stream = 0x104;
      iVar3 = iVar3 + 1;
      stream[1] = (int)streamData->currentCar;
      stream[2] = (uint)ptVar1->fSimNumber;
      stream[3] = 0x106;
      stream[4] = (int)streamData->currentCar;
      stream[5] = 1;
      stream[6] = 0x10a;
      stream[7] = (int)streamData->currentCar;
      stream[8] = 0;
      stream[9] = 0x10b;
      stream[10] = (int)streamData->currentCar;
      stream[0xb] = 0;
      stream[0xc] = 0x105;
      stream[0xd] = (int)streamData->currentCar;
      stream[0xe] = 4;
      stream[0xf] = 0x118;
      stream[0x10] = (int)streamData->currentCar;
      stream[0x11] = 8;
      stream[0x12] = 0x10c;
      stream[0x13] = (int)streamData->currentCar;
      stream[0x14] = 1;
      stream[0x15] = 0x125;
      stream[0x16] = (int)streamData->currentCar;
      stream[0x17] = 0;
      stream[0x18] = 0x110;
      stream[0x19] = (int)streamData->currentCar;
      stream[0x1a] = 0;
      stream[0x1b] = 0x112;
      stream[0x1c] = (int)streamData->currentCar;
      stream[0x1d] = 0;
      stream[0x1e] = 0x10d;
      stream[0x1f] = (int)streamData->currentCar;
      stream[0x20] = 0;
      streamData->currentCar = streamData->currentCar + 1;
      stream = stream + 0x21;
    } while (iVar3 * 0x10000 >> 0x10 < (int)streamData->numTraffic);
  }
  iVar3 = (uint)(ushort)streamData->numTraffic << 0x10;
  iVar2 = iVar3 >> 0x10;
  iVar3 = (iVar2 / 3 + (iVar2 >> 0x1f)) - (iVar3 >> 0x1f);
  if ((0 < iVar2) && (iVar3 < 1)) {
    iVar3 = 1;
  }
  *stream = 0xd;
  stream[1] = iVar3;
  return stream + 2;
}



// decompiled code
// original method signature: 
// int * /*$ra*/ Front_AppendTrackData__FPiR9tFEStream(int *stream /*$s1*/, struct tFEStream *streamData /*$s2*/)
 // line 2114, offset 0x8002a56c
	/* begin block 1 */
		// Start line: 2115
		// Start offset: 0x8002A56C
		// Variables:
	// 		struct tTrackInformation trackInfo; // stack offset -64
	// 		int valtopass; // $a0
	/* end block 1 */
	// End offset: 0x8002A5F0
	// End Line: 2135

	/* begin block 2 */
		// Start line: 4757
	/* end block 2 */
	// End Line: 4758

	/* begin block 3 */
		// Start line: 4762
	/* end block 3 */
	// End Line: 4763

	/* begin block 4 */
		// Start line: 4762
	/* end block 4 */
	// End Line: 4763

int * Front_AppendTrackData__FPiR9tFEStream(int *stream,tFEStream *streamData)

{
  int iVar1;
  tTrackInformation tStack64;
  
  GetTrack__13tTrackManagersR17tTrackInformation
            (&trackManager,(ushort)(byte)frontEnd.track[(uint)(byte)frontEnd.pinkSlipsTrackIndex],
             &tStack64);
  iVar1 = 0;
  if (frontEnd.displaySpeed[0] != '\x01') {
    if (((byte)frontEnd.displaySpeed[0] < 2) || (frontEnd.displaySpeed[0] != '\x02')) {
      iVar1 = (int)CountryMeasurement[(uint)tStack64.fSpeedoCountry];
    }
    else {
      iVar1 = 1;
    }
  }
  *stream = 0x1a;
  stream[1] = iVar1;
  stream[2] = 0x18;
  stream[3] = (uint)(streamData->track).fMirrored;
  stream[4] = 0x19;
  stream[5] = (uint)(streamData->track).fDirection;
  stream[6] = 0x14;
  stream[7] = (uint)(streamData->track).fWeather;
  stream[8] = 0x17;
  stream[9] = (uint)(streamData->track).fTimeOfDay;
  stream[10] = 0x12;
  stream[0xb] = (uint)(streamData->trackInfo).fSimNumber;
  stream[0xc] = 0xb;
  stream[0xd] = (streamData->track).fDifficulty;
  return stream + 0xe;
}



// decompiled code
// original method signature: 
// void * /*$ra*/ Front_EnableLocalSpeech__Fv()
 // line 2269, offset 0x8002a6ac
	/* begin block 1 */
		// Start line: 2270
		// Start offset: 0x8002A6AC
		// Variables:
	// 		void * result; // $s1
	// 		struct tTrackInformation trackInfo; // stack offset -64
	/* end block 1 */
	// End offset: 0x8002A720
	// End Line: 2291

	/* begin block 2 */
		// Start line: 4951
	/* end block 2 */
	// End Line: 4952

	/* begin block 3 */
		// Start line: 5074
	/* end block 3 */
	// End Line: 5075

	/* begin block 4 */
		// Start line: 5074
	/* end block 4 */
	// End Line: 5075

/* WARNING: Unknown calling convention yet parameter storage is locked */

void * Front_EnableLocalSpeech__Fv(void)

{
  undefined *puVar1;
  tTrackInformation tStack64;
  
  puVar1 = (undefined *)0x0;
  if (frontEnd.raceType == '\x01') {
    GetTrack__13tTrackManagersR17tTrackInformation
              (&trackManager,(ushort)(byte)frontEnd.track[(uint)(byte)frontEnd.pinkSlipsTrackIndex],
               &tStack64);
    puVar1 = (undefined *)0x0;
    if ((tStack64.fLanguage != frontEnd.language) &&
       ((tStack64.fLanguage < 3 || (puVar1 = (undefined *)0x0, tStack64.fLanguage == 6)))) {
      puVar1 = &DAT_00000001;
    }
  }
  return puVar1;
}



// decompiled code
// original method signature: 
// int * /*$ra*/ Front_BuildStream__FPi(int *stream /*$s3*/)
 // line 2299, offset 0x8002a738
	/* begin block 1 */
		// Start line: 2300
		// Start offset: 0x8002A738
		// Variables:
	// 		int *d; // $s0
	// 		int j; // $v1
	// 		struct tFEStream streamData; // stack offset -768
	// 		int colourLoop; // $v1
	// 		int numplaylistsongs; // $a1
	// 		int type; // $s2
	// 		int config; // $s4
	// 		int gameLang; // $s2
	// 		int trackLang; // $s1

		/* begin block 1.1 */
			// Start line: 2300
			// Start offset: 0x8002A738

			/* begin block 1.1.1 */
				// Start line: 2300
				// Start offset: 0x8002A738
			/* end block 1.1.1 */
			// End offset: 0x8002A738
			// End Line: 2300
		/* end block 1.1 */
		// End offset: 0x8002A738
		// End Line: 2300
	/* end block 1 */
	// End offset: 0x8002B6A0
	// End Line: 2720

	/* begin block 2 */
		// Start line: 5133
	/* end block 2 */
	// End Line: 5134

	/* begin block 3 */
		// Start line: 5142
	/* end block 3 */
	// End Line: 5143

	/* begin block 4 */
		// Start line: 5142
	/* end block 4 */
	// End Line: 5143

int * Front_BuildStream__FPi(int *stream)

{
  void *pvVar1;
  int *stream_00;
  int iVar2;
  int iVar3;
  int iVar4;
  uint value;
  tfrontEnd *ptVar5;
  uint value_00;
  int iVar6;
  uint *puVar7;
  int *piVar8;
  tFEStream tStack768;
  
  Front_InitStream__FR9tFEStream(&tStack768);
  Front_InitPlayerCars__FR9tFEStream(&tStack768);
  Front_InitTrack__FR9tFEStream(&tStack768);
  Front_InitTourneyTraffic__FR9tFEStream(&tStack768);
  Front_InitOpponentCars__FR9tFEStream(&tStack768);
  Front_InitMissions__FR9tFEStream(&tStack768);
  Front_InitCopCars__FR9tFEStream(&tStack768);
  Front_InitPerps__FR9tFEStream(&tStack768);
  Front_InitTraffic__FR9tFEStream(&tStack768);
  frontEnd.randomSeed = (short)ticks;
  seedrandom((int)frontEnd.randomSeed);
  iVar4 = 7;
  stream_00 = &INT_80051930;
  do {
    *stream_00 = 0;
    iVar4 = iVar4 + -1;
    stream_00 = stream_00 + -1;
  } while (-1 < iVar4);
  Controller_SetRamp__Fv();
  resizememadr((int)stream,0x10000);
  *stream = 0x34;
  value = (uint)(byte)frontEnd.controlConfig[0];
  stream[2] = 0x35;
  stream[1] = value;
  value = (uint)(byte)frontEnd.deadSpot[0];
  stream[4] = 0x36;
  stream[3] = value;
  value = (uint)(byte)frontEnd.steeringRange[0];
  stream[6] = 0x37;
  stream[5] = value;
  value = (uint)(byte)frontEnd.IImaxRange[0];
  stream[8] = 0x38;
  stream[7] = value;
  value = (uint)(byte)frontEnd.ImaxRange[0];
  stream[10] = 0x39;
  stream[9] = value;
  value = (uint)(byte)frontEnd.J1MAX[0];
  stream[0xc] = 0x3a;
  stream[0xb] = value;
  value = (uint)(byte)frontEnd.J1MIN[0];
  stream[0xe] = 0x3b;
  stream[0xd] = value;
  value = (uint)(byte)frontEnd.J2MAX[0];
  stream[0x10] = 0x3c;
  stream[0xf] = value;
  value = (uint)(byte)frontEnd.J2MIN[0];
  stream[0x12] = 0x3d;
  stream[0x11] = value;
  value = (uint)(byte)frontEnd.shockMode[0];
  stream[0x14] = 0x3e;
  stream[0x13] = value;
  stream[0x15] = (uint)(byte)frontEnd.shockImpact[0];
  stream[0x16] = 0x3f;
  value = (uint)(byte)frontEnd.controlConfig[1];
  stream[0x18] = 0x40;
  stream[0x17] = value;
  value = (uint)(byte)frontEnd.deadSpot[1];
  stream[0x1a] = 0x41;
  stream[0x19] = value;
  value = (uint)(byte)frontEnd.steeringRange[1];
  stream[0x1c] = 0x42;
  stream[0x1b] = value;
  value = (uint)(byte)frontEnd.IImaxRange[1];
  stream[0x1e] = 0x43;
  stream[0x1d] = value;
  value = (uint)(byte)frontEnd.ImaxRange[1];
  stream[0x20] = 0x44;
  stream[0x1f] = value;
  value = (uint)(byte)frontEnd.J1MAX[1];
  stream[0x22] = 0x45;
  stream[0x21] = value;
  value = (uint)(byte)frontEnd.J1MIN[1];
  stream[0x24] = 0x46;
  stream[0x23] = value;
  value = (uint)(byte)frontEnd.J2MAX[1];
  stream[0x26] = 0x47;
  stream[0x25] = value;
  value = (uint)(byte)frontEnd.J2MIN[1];
  stream[0x28] = 0x48;
  stream[0x27] = value;
  value = (uint)(byte)frontEnd.shockMode[1];
  stream[0x2a] = 0x49;
  stream[0x29] = value;
  value = (uint)(byte)frontEnd.shockImpact[1];
  stream[0x2c] = 0x21;
  stream[0x2b] = value;
  stream[0x2d] = -1;
  stream[0x2e] = 3;
  stream[0x2f] = 1;
  stream[0x30] = 0x1b;
  iVar4 = (int)frontEnd.randomSeed;
  stream[0x32] = 0x4a;
  stream[0x33] = 0;
  stream[0x34] = 0x24;
  stream[0x31] = iVar4;
  value = (uint)(byte)frontEnd.language;
  if ((frontEnd.localSpeech == '\0') ||
     (pvVar1 = Front_EnableLocalSpeech__Fv(), pvVar1 == (void *)0x0)) {
    stream[0x35] = value;
  }
  else {
    stream[0x35] = (uint)tStack768.trackInfo.fLanguage;
  }
  stream[0x36] = 0x27;
  stream[0x37] = (uint)(byte)frontEnd.language;
  stream[0x38] = 0x28;
  stream[0x39] = (uint)(byte)frontEnd.measurement;
  stream[0x3a] = 0x11;
  stream[0x3b] = 0;
  stream[0x3c] = 9;
  stream[0x3d] = (uint)(byte)frontEnd.skillLevel;
  stream[0x3e] = 10;
  stream[0x3f] = (uint)(byte)frontEnd.gameMode;
  stream[0x40] = 7;
  stream[0x41] = (uint)(byte)frontEnd.raceType;
  stream[0x42] = 0x115;
  stream[0x43] = 0;
  stream[0x44] = 0;
  stream[0x45] = 0x117;
  stream[0x46] = 0;
  stream[0x47] = 0;
  stream[0x48] = 0xf;
  stream[0x49] = (uint)(byte)frontEnd.catchup;
  stream_00 = Front_AppendTrackData__FPiR9tFEStream(stream + 0x4a,&tStack768);
  *stream_00 = 0x13;
  stream_00[1] = (uint)(byte)frontEnd.song;
  stream_00[2] = 0x2a;
  stream_00[3] = (uint)(byte)frontEnd.audioMode;
  stream_00[4] = 0x2b;
  stream_00[5] = (uint)(byte)frontEnd.musicVolume;
  stream_00[6] = 0x2c;
  stream_00[7] = (uint)(byte)frontEnd.sfxVolume;
  stream_00[8] = 0x2d;
  stream_00[9] = (uint)(byte)frontEnd.engineVolume;
  stream_00[10] = 0x2e;
  stream_00[0xb] = (uint)(byte)frontEnd.narrationVolume;
  stream_00[0xc] = 0x2f;
  stream_00[0xd] = (uint)(byte)frontEnd.ambientVolume;
  stream_00[0xe] = 0x16;
  puVar7 = (uint *)(stream_00 + 0xf);
  if (tStack768.playerCars[0].fCarID == '\x1c') {
    *puVar7 = 0;
  }
  else {
    if (frontEnd.raceType == '\x02') {
      *puVar7 = 1;
    }
    else {
      *puVar7 = (uint)(byte)frontEnd.damage;
    }
  }
  iVar6 = 0;
  iVar4 = 0;
  ptVar5 = &frontEnd;
  do {
    if (ptVar5->FEPlayList[0] != (void *)0x0) {
      iVar6 = iVar6 + 1;
    }
    iVar4 = iVar4 + 1;
    ptVar5 = (tfrontEnd *)&ptVar5->raceType;
  } while (iVar4 < 0x28);
  stream_00[0x10] = 0x30;
  stream_00[0x11] = iVar6;
  stream_00[0x12] = 0x4c;
  stream_00[0x13] = iVar6;
  stream_00 = stream_00 + 0x14;
  iVar4 = 0;
  ptVar5 = &frontEnd;
  do {
    if (ptVar5->FEPlayList[0] != (void *)0x0) {
      *stream_00 = iVar4;
      stream_00 = stream_00 + 1;
    }
    iVar4 = iVar4 + 1;
    ptVar5 = (tfrontEnd *)&ptVar5->raceType;
  } while (iVar4 < 0x28);
  *stream_00 = 0x29;
  iVar4 = Stattool_ReturnRecordLapTime__Fs((short)tStack768.track.fTrackNumber);
  stream_00[1] = iVar4;
  stream_00[2] = 8;
  if ((frontEnd.raceType != '\0') || (iVar4 = 1, frontEnd.carListType != '\0')) {
    iVar4 = Front_GetLapsForType__Fv();
  }
  stream_00[3] = iVar4;
  if (((tStack768.playerCars[0].fCarClass == '\a') || (tStack768.playerCars[1].fCarClass == '\a'))
     || ((frontEnd.raceType == '\0' && ((frontEnd.oppNumber == '\0' && (frontEnd.gameMode == '\0')))
         ))) {
    stream_00[4] = 0x20;
    stream_00[5] = 0;
    stream_00[6] = 0x32;
    stream_00[7] = 0;
    stream_00[8] = 0x33;
    stream_00[9] = 0;
  }
  else {
    stream_00[4] = 0x20;
    stream_00[5] = (uint)(byte)frontEnd.checkPointType;
    stream_00[6] = 0x32;
    if (frontEnd.checkPointDisplay[0] == '\x01') {
      iVar4 = 2;
      if (CountryMeasurement[(uint)tStack768.trackInfo.fSpeedoCountry] != 0) {
        iVar4 = 1;
      }
    }
    else {
      iVar4 = 0;
    }
    stream_00[7] = iVar4;
    stream_00[8] = 0x33;
    if (frontEnd.checkPointDisplay[1] == '\x01') {
      iVar4 = 2;
      if (CountryMeasurement[(uint)tStack768.trackInfo.fSpeedoCountry] != 0) {
        iVar4 = 1;
      }
    }
    else {
      iVar4 = 0;
    }
    stream_00[9] = iVar4;
  }
  stream_00 = Front_AppendPlayerCarData__FPiR9tFEStream(stream_00 + 10,&tStack768);
  stream_00 = Front_AppendOpponentData__FPiR9tFEStream(stream_00,&tStack768);
  stream_00 = Front_AppendPerpData__FPiR9tFEStream(stream_00,&tStack768);
  stream_00 = Front_AppendCopData__FPiR9tFEStream(stream_00,&tStack768);
  stream_00 = Front_AppendTrafficData__FPiR9tFEStream(stream_00,&tStack768);
  *stream_00 = 0x1c;
  stream_00[1] = (int)tStack768.numPlayers + (int)tStack768.numOpponents + (int)tStack768.numCops +
                 (int)tStack768.numSuperCops + (int)tStack768.numPerpObjects +
                 (int)tStack768.numTraffic;
  stream_00[2] = 0xe5;
  iVar4 = GetPSXPadValue__Fii(1,0);
  stream_00[3] = iVar4;
  stream_00[4] = 0xeb;
  iVar4 = GetPSXPadValue__Fii(8,0);
  stream_00[5] = iVar4;
  stream_00[6] = 0xe8;
  iVar4 = GetPSXPadValue__Fii(0x80,0);
  stream_00[7] = iVar4;
  stream_00[8] = 0xe9;
  iVar4 = GetPSXPadValue__Fii(0x20,0);
  stream_00[9] = iVar4;
  stream_00[10] = 0xe6;
  iVar4 = GetPSXPadValue__Fii(0x10,0);
  stream_00[0xb] = iVar4;
  stream_00[0xc] = 0xe7;
  iVar4 = GetPSXPadValue__Fii(0x40,0);
  stream_00[0xd] = iVar4;
  stream_00[0xe] = 0xea;
  iVar4 = GetPSXPadValue__Fii(0x4000,0);
  stream_00[0xf] = iVar4;
  value = (uint)(byte)frontEnd.controlConfig[0];
  if (frontEnd.controlType[0] == 0x23) {
    iVar4 = 0;
  }
  else {
    if ((frontEnd.controlType[0] == 0x53) || (iVar4 = 2, frontEnd.controlType[0] == 0x73)) {
      iVar4 = 1;
    }
  }
  stream_00[0x10] = 0x4f;
  iVar6 = value * 0x27 + iVar4;
  iVar2 = iVar6 * 4;
  iVar3 = GetPSXPadValue__Fii((&mappings)[iVar6],0);
  stream_00[0x11] = iVar3;
  stream_00[0x12] = 0x50;
  iVar3 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e08)[iVar6],0);
  stream_00[0x13] = iVar3;
  stream_00[0x14] = 0x51;
  iVar3 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e14)[iVar6],0);
  stream_00[0x15] = iVar3;
  stream_00[0x16] = 0x52;
  iVar3 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e20)[iVar6],0);
  stream_00[0x17] = iVar3;
  stream_00[0x18] = 0xfb;
  iVar3 = GetPSXPadValue__Fii(*(int *)(&DAT_80120e5c + iVar2),0);
  stream_00[0x19] = iVar3;
  stream_00[0x1a] = 0x53;
  iVar6 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e2c)[iVar6],0);
  stream_00[0x1b] = iVar6;
  stream_00[0x1c] = 0x66;
  iVar6 = GetPSXPadValue__Fii(*(int *)(&DAT_80120e38 + iVar2),0);
  stream_00[0x1d] = iVar6;
  stream_00[0x1e] = 0x67;
  iVar6 = GetPSXPadValue__Fii(*(int *)(&DAT_80120e44 + iVar2),0);
  stream_00[0x1f] = iVar6;
  stream_00[0x20] = 0x68;
  iVar6 = GetPSXPadValue__Fii(*(int *)(&DAT_80120e8c + iVar2),0);
  stream_00[0x21] = iVar6;
  if (tStack768.track.fTimeOfDay == '\0') {
    stream_00[0x22] = 0x73;
    stream_00[0x23] = 0;
    stream_00[0x24] = 0x54;
    value_00 = *(uint *)(&DAT_80120e68 + iVar2);
    if (iVar4 == 1) {
      value_00 = value_00 | 6;
    }
  }
  else {
    stream_00[0x22] = 0x73;
    iVar6 = GetPSXPadValue__Fii(*(int *)(&DAT_80120e68 + iVar2),0);
    stream_00[0x23] = iVar6;
    stream_00[0x24] = 0x54;
    value_00 = 0;
    if (iVar4 == 1) {
      value_00 = 6;
    }
  }
  iVar6 = GetPSXPadValue__Fii(value_00,0);
  stream_00[0x25] = iVar6;
  stream_00[0x26] = 0x4d;
  iVar6 = value * 0x27 + iVar4;
  iVar2 = iVar6 * 4;
  iVar3 = GetPSXPadValue__Fii(*(int *)(&DAT_80120e80 + iVar2),0);
  stream_00[0x27] = iVar3;
  stream_00[0x28] = 0x75;
  iVar3 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e50)[iVar6],0);
  stream_00[0x29] = iVar3;
  stream_00[0x2a] = 0x65;
  iVar3 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e50)[iVar6],0);
  stream_00[0x2b] = iVar3;
  stream_00[0x2c] = 0x85;
  iVar3 = GetPSXPadValue__Fii(0x800,0);
  stream_00[0x2d] = iVar3;
  piVar8 = stream_00 + 0x2e;
  if (tStack768.playerCars[0].fCarClass == '\a') {
    if (frontEnd.gameMode != '\x01') {
      *piVar8 = 0x7a;
      iVar6 = GetPSXPadValue__Fii(0x8000,0);
      stream_00[0x2f] = iVar6;
      stream_00[0x30] = 0x7b;
      iVar6 = GetPSXPadValue__Fii(0x2000,0);
      stream_00[0x31] = iVar6;
      stream_00[0x32] = 0x7c;
      iVar6 = GetPSXPadValue__Fii(0x1000,0);
      stream_00[0x33] = iVar6;
      piVar8 = stream_00 + 0x34;
    }
    *piVar8 = 0x81;
    value = *(uint *)(&DAT_80120e74 + iVar2);
    piVar8 = piVar8 + 1;
    if (iVar4 == 1) {
      value = value | 6;
    }
  }
  else {
    *piVar8 = 0x82;
    value = *(uint *)(&DAT_80120e74 + iVar2);
    if (iVar4 == 1) {
      value = value | 6;
    }
    iVar4 = GetPSXPadValue__Fii(value,0);
    stream_00[0x2f] = iVar4;
    stream_00[0x30] = 0x7d;
    iVar4 = GetPSXPadValue__Fii((&mappings)[iVar6],0);
    stream_00[0x31] = iVar4;
    stream_00[0x32] = 0x7e;
    iVar4 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e08)[iVar6],0);
    stream_00[0x33] = iVar4;
    stream_00[0x34] = 0x81;
    piVar8 = stream_00 + 0x35;
    value = 0x40;
  }
  iVar4 = GetPSXPadValue__Fii(value,0);
  *piVar8 = iVar4;
  stream_00 = piVar8 + 1;
  if (frontEnd.gameMode == '\x01') {
    value = (uint)(byte)frontEnd.controlConfig[1];
    if (frontEnd.controlType[1] == 0x23) {
      iVar4 = 0;
    }
    else {
      if ((frontEnd.controlType[1] == 0x53) || (iVar4 = 2, frontEnd.controlType[1] == 0x73)) {
        iVar4 = 1;
      }
    }
    *stream_00 = 0x9b;
    iVar6 = value * 0x27 + iVar4;
    iVar2 = iVar6 * 4;
    iVar3 = GetPSXPadValue__Fii((&mappings)[iVar6],1);
    piVar8[2] = iVar3;
    piVar8[3] = 0x9c;
    iVar3 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e08)[iVar6],1);
    piVar8[4] = iVar3;
    piVar8[5] = 0x9d;
    iVar3 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e14)[iVar6],1);
    piVar8[6] = iVar3;
    piVar8[7] = 0x9e;
    iVar3 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e20)[iVar6],1);
    piVar8[8] = iVar3;
    piVar8[9] = 0xfc;
    iVar3 = GetPSXPadValue__Fii(*(int *)(&DAT_80120e5c + iVar2),1);
    piVar8[10] = iVar3;
    piVar8[0xb] = 0x9f;
    iVar6 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e2c)[iVar6],1);
    piVar8[0xc] = iVar6;
    piVar8[0xd] = 0xb2;
    iVar6 = GetPSXPadValue__Fii(*(int *)(&DAT_80120e38 + iVar2),1);
    piVar8[0xe] = iVar6;
    piVar8[0xf] = 0xb3;
    iVar6 = GetPSXPadValue__Fii(*(int *)(&DAT_80120e44 + iVar2),1);
    piVar8[0x10] = iVar6;
    piVar8[0x11] = 0xb4;
    iVar6 = GetPSXPadValue__Fii(*(int *)(&DAT_80120e8c + iVar2),1);
    piVar8[0x12] = iVar6;
    if (tStack768.track.fTimeOfDay == '\0') {
      piVar8[0x13] = 0xbf;
      piVar8[0x14] = 0;
      piVar8[0x15] = 0xa0;
      value_00 = *(uint *)(&DAT_80120e68 + iVar2);
      if (iVar4 == 1) {
        value_00 = value_00 | 6;
      }
    }
    else {
      piVar8[0x13] = 0xbf;
      iVar6 = GetPSXPadValue__Fii(*(int *)(&DAT_80120e68 + iVar2),1);
      piVar8[0x14] = iVar6;
      piVar8[0x15] = 0xa0;
      value_00 = 0;
      if (iVar4 == 1) {
        value_00 = 6;
      }
    }
    iVar6 = GetPSXPadValue__Fii(value_00,1);
    piVar8[0x16] = iVar6;
    piVar8[0x17] = 0x99;
    iVar6 = value * 0x27 + iVar4;
    iVar2 = iVar6 * 4;
    iVar3 = GetPSXPadValue__Fii(*(int *)(&DAT_80120e80 + iVar2),1);
    piVar8[0x18] = iVar3;
    piVar8[0x19] = 0xc1;
    iVar3 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e50)[iVar6],1);
    piVar8[0x1a] = iVar3;
    piVar8[0x1b] = 0xb1;
    iVar3 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e50)[iVar6],1);
    piVar8[0x1c] = iVar3;
    piVar8[0x1d] = 0xd1;
    iVar3 = GetPSXPadValue__Fii(0x800,1);
    piVar8[0x1e] = iVar3;
    if (tStack768.playerCars[1].fCarClass == '\a') {
      piVar8[0x1f] = 0xcd;
      value = *(uint *)(&DAT_80120e74 + iVar2);
      piVar8 = piVar8 + 0x20;
      if (iVar4 == 1) {
        value = value | 6;
      }
    }
    else {
      piVar8[0x1f] = 0xce;
      value = *(uint *)(&DAT_80120e74 + iVar2);
      if (iVar4 == 1) {
        value = value | 6;
      }
      iVar4 = GetPSXPadValue__Fii(value,1);
      piVar8[0x20] = iVar4;
      piVar8[0x21] = 0xc9;
      iVar4 = GetPSXPadValue__Fii((&mappings)[iVar6],1);
      piVar8[0x22] = iVar4;
      piVar8[0x23] = 0xca;
      iVar4 = GetPSXPadValue__Fii((int)(&PTR_DAT_80120e08)[iVar6],1);
      piVar8[0x24] = iVar4;
      piVar8[0x25] = 0xcd;
      piVar8 = piVar8 + 0x26;
      value = 0x40;
    }
    iVar4 = GetPSXPadValue__Fii(value,1);
    *piVar8 = iVar4;
    stream_00 = piVar8 + 1;
  }
  *stream_00 = 0;
  resizememadr((int)stream,(int)stream_00 + (4 - (int)stream));
  return stream;
}



// decompiled code
// original method signature: 
// void /*$ra*/ Front_GetInGameVars__Fv()
 // line 2728, offset 0x8002b6d8
	/* begin block 1 */
		// Start line: 2729
		// Start offset: 0x8002B6D8
		// Variables:
	// 		int i; // $t1
	/* end block 1 */
	// End offset: 0x8002B7BC
	// End Line: 2753

	/* begin block 2 */
		// Start line: 6079
	/* end block 2 */
	// End Line: 6080

	/* begin block 3 */
		// Start line: 6085
	/* end block 3 */
	// End Line: 6086

	/* begin block 4 */
		// Start line: 6085
	/* end block 4 */
	// End Line: 6086

/* WARNING: Unknown calling convention yet parameter storage is locked */

void Front_GetInGameVars__Fv(void)

{
  GameSetup_tData *pGVar1;
  int iVar2;
  int iVar3;
  
  frontEnd.musicVolume = (byte)gMasterMusicLevel;
  AudioMus_Volume__Fi((int)((uint)(byte)gMasterMusicLevel * 0x23) >> 6);
  pGVar1 = &GameSetup_gData;
  frontEnd.sfxVolume = (char)gMasterSFXLevel;
  frontEnd.engineVolume = (char)gMasterEngineLevel;
  frontEnd.narrationVolume = (char)gMasterFENarrationLevel;
  frontEnd.ambientVolume = (char)gMasterAmbientLevel;
  frontEnd.pinkSlipsForfeit = (short)GameSetup_gData.pinkSlipsForfeit;
  iVar2 = 0;
  do {
    frontEnd.controlConfig[iVar2] = *(char *)(pGVar1->controllerData).controllerConfig;
    frontEnd.deadSpot[iVar2] = *(char *)(pGVar1->controllerData).deadSpot;
    frontEnd.steeringRange[iVar2] = *(char *)(pGVar1->controllerData).steeringRange;
    frontEnd.IImaxRange[iVar2] = *(char *)(pGVar1->controllerData).IImaxRange;
    frontEnd.ImaxRange[iVar2] = *(char *)(pGVar1->controllerData).ImaxRange;
    iVar3 = iVar2 + 1;
    frontEnd.shockMode[iVar2] = *(char *)(pGVar1->controllerData).shockMode;
    frontEnd.shockImpact[iVar2] = *(char *)(pGVar1->controllerData).shockImpact;
    pGVar1 = (GameSetup_tData *)&pGVar1->numLaps;
    iVar2 = iVar3;
  } while (iVar3 < 2);
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ SetLicensePlate__Fv()
 // line 2762, offset 0x8002b7cc
	/* begin block 1 */
		// Start line: 2763
		// Start offset: 0x8002B7CC

		/* begin block 1.1 */
			// Start line: 2763
			// Start offset: 0x8002B7CC
			// Variables:
		// 		short i; // $s2
		/* end block 1.1 */
		// End offset: 0x8002B858
		// End Line: 2772
	/* end block 1 */
	// End offset: 0x8002B858
	// End Line: 2772

	/* begin block 2 */
		// Start line: 6167
	/* end block 2 */
	// End Line: 6168

	/* begin block 3 */
		// Start line: 6177
	/* end block 3 */
	// End Line: 6178

	/* begin block 4 */
		// Start line: 6177
	/* end block 4 */
	// End Line: 6178

/* WARNING: Unknown calling convention yet parameter storage is locked */

void SetLicensePlate__Fv(void)

{
  char *__format;
  char *__s;
  int player;
  int iVar1;
  
  iVar1 = 0;
  player = 0;
  do {
    player = player >> 0x10;
    __format = PlayerName__Fi(player);
    __s = frontEnd.licensePlate + player * 8;
    sprintf(__s,__format);
    StatTool_UpperCaseItKeepingInMindThoseBloodySpecialCharacters__FPc(__s);
    s_lower__FPc(__s);
    CarIO_CleanUpLicense__Fi(player);
    CarIO_CreateLicense__FPcii(__s,0,player);
    iVar1 = iVar1 + 1;
    player = iVar1 * 0x10000;
  } while (iVar1 * 0x10000 >> 0x10 < 2);
  return;
}



// decompiled code
// original method signature: 
// void /*$ra*/ SetPlayList__Fi(int ivealreadygotone /*$s0*/)
 // line 2777, offset 0x8002b874
	/* begin block 1 */
		// Start line: 2778
		// Start offset: 0x8002B874
		// Variables:
	// 		int i; // $v1
	// 		struct AudioMus_tSongList *songlist; // $a0
	/* end block 1 */
	// End offset: 0x8002B920
	// End Line: 2807

	/* begin block 2 */
		// Start line: 6203
	/* end block 2 */
	// End Line: 6204

	/* begin block 3 */
		// Start line: 6209
	/* end block 3 */
	// End Line: 6210

	/* begin block 4 */
		// Start line: 6209
	/* end block 4 */
	// End Line: 6210

void SetPlayList__Fi(int ivealreadygotone)

{
  AudioMus_tSongList *pAVar1;
  int iVar2;
  int iVar3;
  AudioMus_tSongList *pAVar4;
  
  AudioMus_SysCleanUp__Fv();
  AudioMus_SysStartUp__FiiPc(0xc000,0x18000,&DAT_800114b0);
  pAVar1 = AudioMus_GetSongList__FPci(s_game__800114b8,0);
  if (ivealreadygotone == 0) {
    iVar3 = 0x27;
    iVar2 = -0x7feeb964;
    do {
      *(undefined4 *)(iVar2 + 0x39c) = 0;
      iVar3 = iVar3 + -1;
      iVar2 = iVar2 + -4;
    } while (-1 < iVar3);
    iVar2 = 0;
    pAVar4 = pAVar1;
    if (0 < pAVar1->numsongs) {
      do {
        frontEnd.FEPlayList[pAVar4[4].currentsong] = (void *)0x1;
        iVar2 = iVar2 + 1;
        pAVar4 = pAVar4 + 8;
      } while (iVar2 < pAVar1->numsongs);
    }
  }
  frontEnd.GotAPlayList = &DAT_00000001;
  purgememadr((int)pAVar1);
  AudioMus_SysCleanUp__Fv();
  AudioMus_SysStartUp__FiiPc((int)&DAT_0000d800,0x18000,&DAT_800114c0);
  return;
}



// decompiled code
// original method signature: 
// short /*$ra*/ Front_GetTrackRaced__Fv()
 // line 2815, offset 0x8002b960
	/* begin block 1 */
		// Start line: 2816
		// Start offset: 0x8002B960
		// Variables:
	// 		short trackraced; // $v0
	// 		struct tTrackInformation trackInfo; // stack offset -56
	/* end block 1 */
	// End offset: 0x8002B9BC
	// End Line: 2831

	/* begin block 2 */
		// Start line: 6281
	/* end block 2 */
	// End Line: 6282

	/* begin block 3 */
		// Start line: 6285
	/* end block 3 */
	// End Line: 6286

	/* begin block 4 */
		// Start line: 6285
	/* end block 4 */
	// End Line: 6286

/* WARNING: Unknown calling convention yet parameter storage is locked */

short Front_GetTrackRaced__Fv(void)

{
  short sVar1;
  tTrackInformation local_38;
  
  if (frontEnd.raceType == '\x02') {
    sVar1 = GetLastTrackRaced__18tTournamentManager(&tournamentManager);
  }
  else {
    GetTrack__13tTrackManagersR17tTrackInformation
              (&trackManager,(ushort)(byte)frontEnd.track[(uint)(byte)frontEnd.pinkSlipsTrackIndex],
               &local_38);
    sVar1 = (short)local_38.fTrackID;
  }
  return sVar1;
}



// decompiled code
// original method signature: 
// void * /*$ra*/ PlayerNameExist__Fi(int player /*$a0*/)
 // line 2834, offset 0x8002b9d0
	/* begin block 1 */
		// Start line: 2835
		// Start offset: 0x8002B9D0
	/* end block 1 */
	// End offset: 0x8002B9D0
	// End Line: 2835

	/* begin block 2 */
		// Start line: 6324
	/* end block 2 */
	// End Line: 6325

	/* begin block 3 */
		// Start line: 6328
	/* end block 3 */
	// End Line: 6329

	/* begin block 4 */
		// Start line: 6328
	/* end block 4 */
	// End Line: 6329

void * PlayerNameExist__Fi(int player)

{
  size_t sVar1;
  
  sVar1 = strlen(frontEnd.playerNameList + player * 8);
  return (void *)(uint)(sVar1 != 0);
}



// decompiled code
// original method signature: 
// char * /*$ra*/ PlayerName__Fi(int player /*$s2*/)
 // line 2841, offset 0x8002b9fc
	/* begin block 1 */
		// Start line: 2842
		// Start offset: 0x8002B9FC
	/* end block 1 */
	// End offset: 0x8002BA70
	// End Line: 2851

	/* begin block 2 */
		// Start line: 6341
	/* end block 2 */
	// End Line: 6342

	/* begin block 3 */
		// Start line: 6345
	/* end block 3 */
	// End Line: 6346

	/* begin block 4 */
		// Start line: 6345
	/* end block 4 */
	// End Line: 6346

char * PlayerName__Fi(int player)

{
  size_t sVar1;
  char *__s;
  int wordnum;
  
  __s = frontEnd.allUpperCasedPlayerNameList + player * 8;
  sprintf(__s,frontEnd.playerNameList + player * 8);
  sVar1 = strlen(__s);
  if (sVar1 == 0) {
    wordnum = 0x4e;
    if (frontEnd.gameMode == '\x01') {
      wordnum = player + 0x50;
    }
    __s = TextSys_Word__Fi(wordnum);
  }
  else {
    StatTool_UpperCaseItKeepingInMindThoseBloodySpecialCharacters__FPc(__s);
  }
  return __s;
}



// decompiled code
// original method signature: 
// char * /*$ra*/ PlayerNameMixedCase__Fi(int player /*$s2*/)
 // line 2859, offset 0x8002ba88
	/* begin block 1 */
		// Start line: 2860
		// Start offset: 0x8002BA88
	/* end block 1 */
	// End offset: 0x8002BADC
	// End Line: 2867

	/* begin block 2 */
		// Start line: 6375
	/* end block 2 */
	// End Line: 6376

	/* begin block 3 */
		// Start line: 6384
	/* end block 3 */
	// End Line: 6385

	/* begin block 4 */
		// Start line: 6384
	/* end block 4 */
	// End Line: 6385

char * PlayerNameMixedCase__Fi(int player)

{
  size_t sVar1;
  char *__s;
  int wordnum;
  
  __s = frontEnd.playerNameList + player * 8;
  sVar1 = strlen(__s);
  if (sVar1 == 0) {
    wordnum = 0x4e;
    if (frontEnd.gameMode == '\x01') {
      wordnum = player + 0x50;
    }
    __s = TextSys_Word__Fi(wordnum);
  }
  return __s;
}





